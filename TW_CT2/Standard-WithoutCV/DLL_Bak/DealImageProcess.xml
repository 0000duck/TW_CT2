<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DealImageProcess</name>
    </assembly>
    <members>
        <member name="M:DealImageProcess.BaseFunImageProcess.DealCalibResult(DealImageProcess.BaseParImageP_PreImageP,DealResult.BaseResult,System.Collections.Hashtable)">
            <summary>
            对结果进行校准
            </summary>
            <param name="cell">校准的算法单元</param>
        </member>
        <member name="M:DealImageProcess.BaseFunImageProcess.SetDefaultCalib(DealImageProcess.BaseParImageP_PreImageP,DealResult.BaseResult,System.Collections.Hashtable)">
            <summary>
            如果不设置校准
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseFunImageProcess.DealCoord(DealImageProcess.BaseParImageP_ROI,DealResult.BaseResultImageProcess)">
            <summary>
            修正坐标系，默认为图像左上角为原点
            </summary>
            <param name="par"></param>
            <param name="result"></param>
        </member>
        <member name="M:DealImageProcess.BaseFunImageProcess.DealOutput(DealResult.BaseResult,DealImageProcess.BaseParImageP_ROI,System.Collections.Hashtable)">
            <summary>
            处理输出
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseFunImageProcess.GetHtImage(DealImageProcess.BaseParImageProcess,System.Collections.Hashtable,System.String@,System.String@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
            从哈希表中获取图像
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseFunImageProcess.CreateROI(DealImageProcess.BaseParImageProcess,System.Collections.Hashtable,System.Boolean@,System.String@)">
            <summary>
            生成ROI
            </summary>
            <param name="par"></param>
            <param name="htResult"></param>
            <param name="blResult"></param>
            <param name="anno"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.BaseFunImageProcess.CreateInitROI(DealImageProcess.BaseParImageProcess)">
            <summary>
            获取原始的不带偏移的ROI
            </summary>
            <param name="par"></param>
            <param name="htResult"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.BaseFunImageProcess.CreateInitExcludeROI(DealImageProcess.BaseParImageProcess,System.Int32)">
            <summary>
            排除所以生成ROI
            </summary>
            <param name="par"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.BaseFunImageProcess.CreateOneROI(DealImageProcess.BaseParImageProcess,System.Collections.Hashtable,System.Boolean@,System.String@)">
            <summary>
            生成单个ROI
            </summary>
            <param name="par"></param>
            <param name="htResult"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.BaseFunImageProcess.CreateOneROI(DealImageProcess.BaseParImageProcess,System.Collections.Hashtable,System.Int32,System.Boolean@,System.String@)">
            <summary>
            按照索引生成ROI
            </summary>
            <param name="par"></param>
            <param name="htResult"></param>
            <param name="index"></param>
            <param name="blResult"></param>
            <param name="anno"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.BaseFunImageProcess.CreateOneROIInit(DealImageProcess.BaseParImageProcess,System.Int32)">
            <summary>
            生成单个ROI
            </summary>
            <param name="par"></param>
            <param name="htResult"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.BaseFunImageProcess.BasicImageProcess_NoPre(DealImageProcess.BaseParImageProcess,DealResult.BaseResultHObject,System.Collections.Hashtable,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
            不带预处理的基础执行
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseFunImageProcess.DealInOutput(DealResult.BaseResultImageProcess,DealInOutput.ParOutput,System.Collections.Hashtable)">
            <summary>
            处理输出
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseFunImageProcess.SetResultValueCom(DealResult.BaseResultImageProcess,DealResult.ResultValueCom)">
            <summary>
            给通用结果赋值
            </summary>
            <param name="baseResultImageProcess"></param>
            <param name="resultValueCom"></param>
        </member>
        <member name="M:DealImageProcess.BaseFunImageProcess.JudgeResult(DealResult.BaseResultImageProcess,DealInOutput.ParOutput,DealResult.ResultOutput)">
            <summary>
            结果判定
            </summary>
            <param name="baseResultImageProcess"></param>
            <param name="par"></param>
            <param name="resultOutput"></param>
        </member>
        <member name="M:DealImageProcess.BaseFunImageProcess.AddDisplay(DealInOutput.ParOutput,DealResult.BaseResult)">
            <summary>
            将产生的结果，添加到结果类显示
            </summary>
            <param name="parDisplayResult"></param>
            <param name="baseResult"></param>
        </member>
        <member name="M:DealImageProcess.BaseFunImageProcess.DeleteCell(System.String,DealImageProcess.BaseParImageProcess)">
            <summary>
            删除单元名称目录下的所有的文件
            </summary>
            <param name="function"></param>
            <param name="baseParImageProcess"></param>
        </member>
        <member name="M:DealImageProcess.BaseFunImageProcess.DeleteImage(System.String,DealImageProcess.BaseParImageProcess)">
            <summary>
            删除方法目录
            </summary>
            <param name="function"></param>
            <param name="baseParImageProcess"></param>
        </member>
        <member name="M:DealImageProcess.BaseFunImageProcess.RecordHoject(DealImageProcess.BaseParImageProcess,DealResult.BaseResultHObject,System.String,System.String,HalconDotNet.HObject)">
            <summary>
            Hobject
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseFunImageProcess.RecordImage(DealImageProcess.BaseParImageProcess,DealResult.BaseResultHObject,System.String,System.String,HalconDotNet.HObject)">
            <summary>
            HoImage
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseFunImageProcess.RecordImage_Record(DealImageProcess.BaseParImageProcess,DealResult.BaseResultHObject,System.String,System.String,HalconDotNet.HObject)">
            <summary>
            默认记录下来
            </summary>
            <param name="par"></param>
            <param name="result"></param>
            <param name="key"></param>
            <param name="ho_Image"></param>
        </member>
        <member name="M:DealImageProcess.BaseFunImageProcess.RecordHobject_L(DealImageProcess.BaseParImageProcess,DealResult.BaseResultHObject,System.String,System.String,System.Collections.Generic.List{HalconDotNet.HObject})">
            <summary>
            Hobject_L
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseFunImageProcess.SaveImage(HalconDotNet.HObject,System.String,System.String)">
            <summary>
            保存图像
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseFunImageProcess.SaveImage(BasicClass.ImageAll,System.String,System.String)">
            <summary>
            保存图像
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseFunImageProcess.GetNameCell(DealImageProcess.BaseParImageProcess)">
            <summary>
            单元名称，或者是通用结果
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseFunImageProcess.SortArray(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.String,System.Double)">
            <summary>
            排列坐标
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="t"></param>
            <param name="strTypeSort"></param>
            <param name="dblThresholdVal"></param>
        </member>
        <member name="M:DealImageProcess.BaseFunImageProcess.SortUp(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double})">
            <summary>
            按升序排列
            </summary>
            <param name="sortArrayX"></param>
            <param name="sortArrayY"></param>
            <param name="sortArrayT"></param>
        </member>
        <member name="M:DealImageProcess.BaseFunImageProcess.SortDown(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double})">
            <summary>
            按降序排列
            </summary>
            <param name="sortArrayX"></param>
            <param name="sortArrayY"></param>
            <param name="sortArrayT"></param>
        </member>
        <member name="M:DealImageProcess.BaseFunImageProcess.SortXY(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.String,System.Double)">
            <summary>
            按XY
            </summary>
            <param name="sortArrayX"></param>
            <param name="sortArrayY"></param>
            <param name="sortArrayT"></param>
        </member>
        <member name="M:DealImageProcess.BaseFunImageProcess.SortYX(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.String,System.Double)">
            <summary>
            按YX
            </summary>
            <param name="sortArrayX"></param>
            <param name="sortArrayY"></param>
            <param name="sortArrayT"></param>
        </member>
        <member name="M:DealImageProcess.BaseFunImageProcess.ArrayReverse(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double})">
            <summary>
            对数组进行倒序排列
            </summary>
            <param name="sortArrayX"></param>
            <param name="sortArrayY"></param>
            <param name="sortArrayT"></param>
        </member>
        <member name="M:DealImageProcess.BaseFunImageProcess.Partition(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Int32,System.Int32)">
            <summary>
            快速排序算法——分部
            </summary>
            <param name="sortArrayX"></param>
            <param name="sortArrayY"></param>
            <param name="sortArrayT"></param>
            <param name="low"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.BaseFunImageProcess.QuickSort(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Int32,System.Int32)">
            <summary>
            快速排序算法
            </summary>
            <param name="sortArrayX"></param>
            <param name="sortArrayY"></param>
            <param name="sortArrayT"></param>
            <param name="low"></param>
            <param name="height"></param>
        </member>
        <member name="M:DealImageProcess.BaseFunImageProcess.BaseStdToResult(DealResult.BaseResult,DealImageProcess.BaseParImageP_PreImageP)">
            <summary>
            基准值保存到结果
            </summary>
            <param name="result"></param>
            <param name="baseParImageP_PreImageP"></param>
        </member>
        <member name="M:DealImageProcess.BaseFunImageProcess.StdMatchToResult(DealResult.BaseResult,DealImageProcess.BaseParImageP_PreImageP)">
            <summary>
            将匹配算法中的基准值赋值给结果
            </summary>
            <param name="result"></param>
            <param name="baseParImageP_PreImageP"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.BaseFunImageProcess.StdStraightLineToResult(DealResult.BaseResult,DealImageProcess.BaseParImageP_PreImageP)">
            <summary>
            将边算法中的基准值，赋值给结果
            </summary>
            <param name="result"></param>
            <param name="parStd"></param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:DealImageProcess.BaseFunImageProcess.StdCrossLineToResult(DealResult.BaseResult,DealImageProcess.BaseParImageP_PreImageP)”忽略有格式错误的 XML 注释 -->
        <member name="M:DealImageProcess.BaseFunImageProcess.StdRegionToResult(DealResult.BaseResult,DealImageProcess.BaseParImageP_PreImageP)">
            <summary>
            将区域算法中的基准值，赋值给结果
            </summary>
            <param name="result"></param>
            <param name="parStd"></param>
            <returns></returns>
        </member>
        <member name="P:DealImageProcess.BaseParImageProcess.ResultHObject_L">
            <summary>
            输出数据结果列表
            </summary>
        </member>
        <member name="P:DealImageProcess.BaseParImageProcess.ResultHObjectForPre_L">
            <summary>
            给预处理算子做嵌入其他算子时用
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseParImageProcess.ChangeClonePar(System.String,System.Int32)">
            <summary>
            改变拷贝后单元应有的参数
            </summary>
            <param name="nameCell">单元名称</param>
            <param name="pos">位置数</param>
        </member>
        <member name="M:DealImageProcess.BaseParImageProcess.ReadXmlChildInit(System.Xml.XmlElement)">
            <summary>
            初始化读取参数，和ReadXmlChild方法相比，只是不读取基础属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.BaseParImageProcess.ReadXmlChild(System.Xml.XmlElement)">
            <summary>
            读取子元素的参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.BaseParImageProcess.ReadBasicAttribute(System.Xml.XmlElement)">
            <summary>
            读取基础属性
            </summary>
            <param name="xeRoot">根节点</param>
        </member>
        <member name="M:DealImageProcess.BaseParImageProcess.ReadBasicPar(System.Xml.XmlElement)">
            <summary>
            读取基础参数
            </summary>
            <param name="xeRoot">根节点</param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.BaseParImageProcess.WriteXmlChild(System.Xml.XmlElement,System.Xml.XmlElement)">
            <summary>
            全局
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseParImageProcess.WriteBasicPar(System.Xml.XmlElement,System.Xml.XmlElement)">
            <summary>
            向根节点中写入基础参数
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseParImageProcess.WriteBasicAttribute(System.Xml.XmlElement)">
            <summary>
            写入基础属性
            </summary>
            <param name="xeRoot">跟节点</param>
        </member>
        <member name="M:DealImageProcess.BaseParImageProcess.WriteBasicPar(System.Xml.XmlElement)">
            <summary>
            写入基础参数
            </summary>
            <param name="xeRoot">根节点</param>
        </member>
        <member name="M:DealImageProcess.BaseParImageProcess.WriteXmlDefault">
            <summary>
            Strange读取完整节点并保存到默认值文件
            </summary>
            <returns>根节点</returns>
        </member>
        <member name="M:DealImageProcess.BaseParImageProcess.LoadXmlStream(System.String)">
            <summary>
            加载资源中Xml文档
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseParImageProcess.LoadXmlStream(System.String,System.String)">
            <summary>
            加载本地或者资源中的xml
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseParImageP_ROI.ReadXmlChildInit(System.Xml.XmlElement)">
            <summary>
            初始化读取参数，和ReadXmlChild方法相比，只是不读取基础属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.BaseParImageP_ROI.ReadXmlChild(System.Xml.XmlElement)">
            <summary>
            读取子元素的参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:DealImageProcess.BaseParImageP_ROI.ReadBasicPar(System.Xml.XmlElement)”忽略有格式错误的 XML 注释 -->
        <member name="M:DealImageProcess.BaseParImageP_ROI.WriteBasicPar(System.Xml.XmlElement)">
            <summary>
            向根节点中写入基础参数
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseParImageP_ROI.WriteBasicPar(System.Xml.XmlElement,System.Xml.XmlElement)">
            <summary>
            向根节点中写入基础参数
            </summary>
        </member>
        <member name="T:DealImageProcess.TypeSortXY_enum">
            <summary>
            排列顺序
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseWinImageProcess.btnClose_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            退出窗体,恢复备份参数
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseWinImageProcess.CloseWinforInit">
            <summary>
            关闭窗体
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseWinImageProcess.LogOutEvent">
            注销事件
        </member>
        <member name="M:DealImageProcess.BaseWinImageProcess.ShowNewWin(System.String,System.String)">
            <summary>
            窗体加载得是新算法得时候
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseWinImageProcess.tcAlgorithm_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            切换选项卡的事件响应
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseWinImageProcess.DealTabChange(System.String)">
            <summary>
            处理选项卡切换
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseWinImageProcess.StopRealResultImage">
            <summary>
            停止实时显示结果
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseWinImageProcess.DealRealChange(System.Object)">
            <summary>
            处理实时变换时候的切换
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseWinImageProcess.RefreshOutputImageProcessInit">
            <summary>
            刷新显示结果
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseWinImageProcess.ShowCameraROI">
            <summary>
            显示相机画面和ROI
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseWinImageProcess.ShowCameraTemp">
            <summary>
            显示相机画面和模板
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseWinImageProcess.RecoverHalWin">
            <summary>
            恢复Halcon的窗体显示
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseWinImageProcess.CloseCameraROI">
            <summary>
            关闭ROI专用显示窗口
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseWinImageProcess.RefreshROI">
            <summary>
            初始化刷新所有AOI
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseWinImageProcess.CreateHalTemp">
            <summary>
            创建模板窗体
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseWinImageProcess.ClearHalTemp">
            <summary>
            清除窗体
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseWinImageProcess.RefreshDrawTemp">
            <summary>
            模板相关的绘制
            </summary>
        </member>
        <member name="M:DealImageProcess.ParComResultImageP.ReadXmlRoot(System.Xml.XmlDocument)">
            <summary>
            从文档中读取参数
            </summary>
        </member>
        <member name="M:DealImageProcess.ParComResultImageP.ReadXmlRoot(System.Xml.XmlElement)">
            <summary>
            从根节点中读取参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParComResultImageP.ReadXmlPar(System.Xml.XmlElement)">
            <summary>
            读取算法参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParComResultImageP.WriteXmlRoot(System.Xml.XmlElement)">
            <summary>
            写入参数到xml节点
            </summary>
        </member>
        <member name="T:DealImageProcess.UCOutCrossLine">
            <summary>
            UCCrossLine.xaml 的交互逻辑
            </summary>
            <summary>
            UCOutCrossLine
            </summary>
        </member>
        <member name="M:DealImageProcess.UCOutCrossLine.dudXMin_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            结果范围
            </summary>
        </member>
        <member name="M:DealImageProcess.UCOutCrossLine.dudRMin_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            R
            </summary>
        </member>
        <member name="M:DealImageProcess.UCOutCrossLine.SaveDudPar">
            <summary>
            保存dud控件的值
            </summary>
        </member>
        <member name="M:DealImageProcess.UCOutCrossLine.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:DealImageProcess.ParCrossLines.Init(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            插入算法单元的时候，输入相关的插入参数
            </summary>
            <param name="typeParent"></param>
            <param name="typeChild"></param>
            <param name="nameCell"></param>
            <param name="pos"></param>
            <param name="noCamera"></param>
            <param name="baseParCamera"></param>
        </member>
        <member name="P:DealImageProcess.ParCrossLines.ResultHObject_L">
            <summary>
            输出数据结果列表
            </summary>
        </member>
        <member name="M:DealImageProcess.ParCrossLines.ReadXmlRoot(System.Xml.XmlDocument)">
            <summary>
            初始化加载,基础参数为UI设置单元算法时传入
            </summary>
            <param name="xDoc">Stream文档</param>
            <returns></returns>  
        </member>
        <member name="M:DealImageProcess.ParCrossLines.ReadXmlRoot(System.Xml.XmlElement)">
            <summary>
            从本地文档读取参数的时候，读取
            </summary>
            <param name="xeRoot">根节点</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:DealImageProcess.ParCrossLines.ReadXmlPar(System.Xml.XmlElement)">
            <summary>
            读取算法参数
            </summary>
            <param name="xeRoot">算法参数根节点</param>
            <returns>成功</returns>
        </member>
        <member name="M:DealImageProcess.ParCrossLines.WriteXmlRoot(System.Xml.XmlDocument)">
            <summary>
            从Stream资源读取完整节点后，写入参数
            </summary>
            <param name="xDoc"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParCrossLines.WriteXmlRoot(System.Xml.XmlElement)">
            <summary>
            从Stream资源读取完整节点后，写入参数
            </summary>
            <param name="xDoc"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParCrossLines.WriteXmlPar(System.Xml.XmlElement)">
            <summary>
            该算法参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="T:DealImageProcess.UCCrossLines">
            <summary>
            UCCrossLines.xaml 的交互逻辑
            </summary>
            <summary>
            UCCrossLines
            </summary>
        </member>
        <member name="M:DealImageProcess.UCCrossLines.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.WinCrossLines">
            <summary>
            WinCrossLines.xaml 的交互逻辑
            </summary>
            <summary>
            WinCrossLines
            </summary>
        </member>
        <member name="M:DealImageProcess.WinCrossLines.LoginEvent">
            <summary>
            事件注册
            </summary>
        </member>
        <member name="M:DealImageProcess.WinCrossLines.btnSaveOnly_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            仅仅保存参数
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.WinCrossLines.btnSave_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            保存并且退出
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.WinCrossLines.RefreshOutputImageProcessInit">
            <summary>
            刷新显示结果
            </summary>
        </member>
        <member name="M:DealImageProcess.WinCrossLines.btnClose_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            退出窗体,恢复备份参数
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.WinCrossLines.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:DealImageProcess.ParMCrossLines.Init(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            插入算法单元的时候，输入相关的插入参数
            </summary>      
        </member>
        <member name="P:DealImageProcess.ParMCrossLines.ResultHObject_L">
            <summary>
            输出数据结果列表
            </summary>
        </member>
        <member name="M:DealImageProcess.ParMCrossLines.ReadXmlRoot(System.Xml.XmlDocument)">
            <summary>
            初始化加载,基础参数为UI设置单元算法时传入
            </summary>
            <param name="xDoc">Stream文档</param>
            <returns></returns>  
        </member>
        <member name="M:DealImageProcess.ParMCrossLines.ReadXmlRoot(System.Xml.XmlElement)">
            <summary>
            从本地文档读取参数的时候，读取
            </summary>
            <param name="xeRoot">根节点</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:DealImageProcess.ParMCrossLines.ReadXmlPar(System.Xml.XmlElement)">
            <summary>
            读取算法参数
            </summary>
            <param name="xeRoot">算法参数根节点</param>
            <returns>成功</returns>
        </member>
        <member name="M:DealImageProcess.ParMCrossLines.WriteXmlRoot(System.Xml.XmlElement)">
            <summary>
            从Stream资源读取完整节点后，写入参数
            </summary>
        </member>
        <member name="M:DealImageProcess.ParMCrossLines.WriteXmlPar(System.Xml.XmlElement)">
            <summary>
            该算法参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="T:DealImageProcess.UCMCrossLines">
            <summary>
            UCCrossLines.xaml 的交互逻辑
            </summary>
            <summary>
            UCMCrossLines
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMCrossLines.SaveDudPar">
            <summary>
            保存dud控件的值
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMCrossLines.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.WinMCrossLines">
            <summary>
            WinCrossLines.xaml 的交互逻辑
            </summary>
            <summary>
            WinMCrossLines
            </summary>
        </member>
        <member name="M:DealImageProcess.WinMCrossLines.LoginEvent">
            <summary>
            事件注册
            </summary>
        </member>
        <member name="M:DealImageProcess.WinMCrossLines.btnSaveOnly_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            仅仅保存
            </summary>
        </member>
        <member name="M:DealImageProcess.WinMCrossLines.btnSave_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            保存且退出
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.WinMCrossLines.SaveDudPar">
            <summary>
            保存dud控件的值
            </summary>
        </member>
        <member name="M:DealImageProcess.WinMCrossLines.RefreshOutputImageProcessInit">
            <summary>
            刷新显示结果
            </summary>
        </member>
        <member name="M:DealImageProcess.WinMCrossLines.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.FunMStraightLine">
            <summary>
            M直线方法
            </summary>
        </member>
        <member name="M:DealImageProcess.FunMStraightLine.GetLine(HalconDotNet.HObject,HalconDotNet.HObject,DealImageProcess.ParMStraightLine,DealResult.BaseResultEdge)">
            <summary>
            求取直线
            </summary>
        </member>
        <member name="M:DealImageProcess.FunMStraightLine.ROISegment(DealImageProcess.ParMStraightLine,HalconDotNet.HObject,System.Collections.Generic.List{BasicClass.Point5D}@)">
            <summary>
            求取分段的ROI
            </summary>
        </member>
        <member name="M:DealImageProcess.ParMStraightLine.Init(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            这里需要初始化一个矩形2
            </summary>
            <param name="typeParent"></param>
            <param name="typeChild"></param>
            <param name="nameCell"></param>
            <param name="pos"></param>
            <param name="noCamera"></param>
        </member>
        <member name="P:DealImageProcess.ParMStraightLine.ResultHObject_L">
            <summary>
            输出数据结果列表
            </summary>
        </member>
        <member name="M:DealImageProcess.ParMStraightLine.ReadXmlRoot(System.Xml.XmlDocument)">
            <summary>
            初始化加载的时候读取根元素     
            </summary>
        </member>
        <member name="M:DealImageProcess.ParMStraightLine.ReadXmlRoot(System.Xml.XmlElement)">
            <summary>
            记载整个配置文件的时候，读取参数
            </summary>
            <param name="xeRoot">根节点</param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParMStraightLine.ReadXmlPar(System.Xml.XmlElement)">
            <summary>
            读取算法参数
            </summary>
            <param name="xeRoot">根节点</param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParMStraightLine.ReadOutputInit(System.Object)">
            <summary>
            读取输出，里面的参数单独修改了
            </summary>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParMStraightLine.WriteXmlRoot(System.Xml.XmlDocument)">
            <summary>
            从Stream资源读取完整节点后，写入参数
            </summary>
            <param name="xDoc"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParMStraightLine.WriteXmlPar(System.Xml.XmlElement)">
            <summary>
            算法参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="T:DealImageProcess.TypePolarity_enum">
            <summary>
            直线极性
            </summary>
        </member>
        <member name="T:DealImageProcess.TypeSelectMEdge_enum">
            <summary>
            边界筛选
            </summary>
        </member>
        <member name="T:DealImageProcess.UCMStraightLine">
            <summary>
            UCMStraightLine.xaml 的交互逻辑
            </summary>
            <summary>
            UCMStraightLine
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMStraightLine.Init(DealImageProcess.ParMStraightLine,System.Collections.Generic.List{BasicComprehensive.CellReference},System.Collections.Generic.List{BasicComprehensive.CellHObjectReference})">
            <summary>
            参数初始化
            </summary>
            <param name="parMStraightLine"></param>
            <param name="cellTemp_L">模板单元</param>
        </member>
        <member name="M:DealImageProcess.UCMStraightLine.dudAmplitude_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            幅度
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMStraightLine.dudSigma_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            平滑系数
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMStraightLine.cboInterpolation_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            插值
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMStraightLine.cboPolarity_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            极性
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMStraightLine.cboSelectLine_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            直线筛选
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMStraightLine.cboNoLine_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            直线序号
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMStraightLine.dudNumSegment_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            分段个数
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMStraightLine.dudWidthROI_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            ROI宽度
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMStraightLine.dudMaxNumPoints_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            最大点数
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCMStraightLine.dudClippingEndPoints_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            拟合剔除点位数
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCMStraightLine.dudIterations_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            迭代次数
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCMStraightLine.dudClippingFactor_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            拟合剔除因素
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCMStraightLine.dudPreBiliDelete_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            预剔除点比例
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMStraightLine.tsbDisplayEffectPoint_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            是否显示剔除后点位
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMStraightLine.SaveDudPar">
            <summary>
            保存dud控件的值
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMStraightLine.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.WinLineDirection">
            <summary>
            LineDirection.xaml 的交互逻辑
            </summary>
            <summary>
            WinLineDirection
            </summary>
        </member>
        <member name="M:DealImageProcess.WinLineDirection.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.WinMStraightLine">
            <summary>
            WinMStraightLine.xaml 的交互逻辑
            </summary>
            <summary>
            WinMStraightLine
            </summary>
        </member>
        <member name="M:DealImageProcess.WinMStraightLine.LoginEvent">
            <summary>
            事件注册
            </summary>
        </member>
        <member name="M:DealImageProcess.WinMStraightLine.Init(DealImageProcess.ParMStraightLine,Camera.BaseUCDisplayCamera,System.Collections.Generic.List{BasicComprehensive.CellReference},System.Collections.Generic.List{BasicComprehensive.CellHObjectReference},System.Collections.Generic.List{BasicComprehensive.CellReference},System.Collections.Hashtable)">
            <summary>
            初始化参数
            </summary>      
        </member>
        <member name="M:DealImageProcess.WinMStraightLine.btnSaveOnly_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            仅仅保存
            </summary>
        </member>
        <member name="M:DealImageProcess.WinMStraightLine.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:DealImageProcess.FunStraightLine.GetLine(HalconDotNet.HObject,HalconDotNet.HObject,DealImageProcess.ParStraightLine,System.Collections.Hashtable)">
            <summary>
            求取直线
            </summary>
            <param name="ho_Image"></param>
            <param name="par"></param>
        </member>
        <member name="M:DealImageProcess.ParEdgesSubPix.Init_AuthorityCtr">
            <summary>
            初始化参数
            </summary>
        </member>
        <member name="M:DealImageProcess.ParFitLineContourXld.Init_AuthorityCtr">
            <summary>
            初始化参数
            </summary>
        </member>
        <member name="M:DealImageProcess.ParSegmentContoursXld.Init_AuthorityCtr">
            <summary>
            初始化参数
            </summary>
        </member>
        <member name="M:DealImageProcess.ParSelectContoursXld.Init_AuthorityCtr">
            <summary>
            初始化参数
            </summary>
        </member>
        <member name="P:DealImageProcess.ParStraightLine.ResultHObject_L">
            <summary>
            输出数据结果列表
            </summary>
        </member>
        <member name="M:DealImageProcess.ParStraightLine.ReadXmlRoot(System.Xml.XmlDocument)">
            <summary>
            初始设置算法，读取参数
            </summary>
            <param name="xDoc"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParStraightLine.ReadXmlRoot(System.Xml.XmlElement)">
            <summary>
            从本地文档里面读取参数的时候调用
            </summary>
            <param name="xeRoot">图像处理的根节点</param>
            <returns>是否成功读取</returns>
        </member>
        <member name="M:DealImageProcess.ParStraightLine.WriteXmlRoot(System.Xml.XmlElement)">
            <summary>
            写入根节点参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParStraightLine.WriteXmlPar(System.Xml.XmlElement)">
            <summary>
            写入参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParUnionCollinearContoursXld.Init_AuthorityCtr">
            <summary>
            初始化参数
            </summary>
        </member>
        <member name="T:DealImageProcess.UCEdgesSubPix">
            <summary>
            UCEdgesSubPix.xaml 的交互逻辑
            </summary>
            <summary>
            UCEdgesSubPix
            </summary>
        </member>
        <member name="M:DealImageProcess.UCEdgesSubPix.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.UCFitLineContourXld">
            <summary>
            UCFitLineContourXld.xaml 的交互逻辑
            </summary>
            <summary>
            UCFitLineContourXld
            </summary>
        </member>
        <member name="M:DealImageProcess.UCFitLineContourXld.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.UCSegmentContoursXld">
            <summary>
            UCSegmentContoursXld.xaml 的交互逻辑
            </summary>
            <summary>
            UCSegmentContoursXld
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSegmentContoursXld.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.UCSelectContoursXld">
            <summary>
            UCSelectContoursXld.xaml 的交互逻辑
            </summary>
            <summary>
            UCSelectContoursXld
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSelectContoursXld.cboFeature2_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            特征2筛选
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCSelectContoursXld.cboFeature3_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            特征3筛选
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCSelectContoursXld.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.UCSelectLine">
            <summary>
            UCSelectLine.xaml 的交互逻辑
            </summary>
            <summary>
            UCSelectLine
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSelectLine.cboSortType_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            排列类型
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCSelectLine.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.UCStraightLine">
            <summary>
            UCLine.xaml 的交互逻辑
            </summary>
            <summary>
            UCStraightLine
            </summary>
        </member>
        <member name="M:DealImageProcess.UCStraightLine.Init(DealImageProcess.ParStraightLine,System.Collections.Generic.List{BasicComprehensive.CellReference},System.Collections.Generic.List{BasicComprehensive.CellHObjectReference})">
            <summary>
            初始化参数
            </summary>
            <param name="uiCamera">相机类</param>
            <param name="baseParImageProcess">参数类</param>
            <param name="cellHObject_L">图像关联</param>
            <param name="cellData_L">数据关联</param>
        </member>
        <member name="M:DealImageProcess.UCStraightLine.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.UnionCollinearContoursXld">
            <summary>
            UnionCollinearContoursXld.xaml 的交互逻辑
            </summary>
            <summary>
            UnionCollinearContoursXld
            </summary>
        </member>
        <member name="M:DealImageProcess.UnionCollinearContoursXld.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.WinStraightLine">
            <summary>
            FindLineWindow.xaml 的交互逻辑
            </summary>
            <summary>
            WinStraightLine
            </summary>
        </member>
        <member name="M:DealImageProcess.WinStraightLine.LoginEvent">
            <summary>
            事件注册
            </summary>
        </member>
        <!-- 对于成员“M:DealImageProcess.WinStraightLine.Init(DealImageProcess.ParStraightLine,Camera.BaseUCDisplayCamera,System.Collections.Generic.List{BasicComprehensive.CellReference},System.Collections.Generic.List{BasicComprehensive.CellHObjectReference},System.Collections.Generic.List{BasicComprehensive.CellReference},System.Collections.Hashtable)”忽略有格式错误的 XML 注释 -->
        <member name="M:DealImageProcess.WinStraightLine.btnSaveOnly_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            仅仅保存
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.WinStraightLine.btnSave_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            保存并且退出
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.WinStraightLine.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.FunMCircle">
            <summary>
            M圆方法
            </summary>
        </member>
        <member name="M:DealImageProcess.FunMCircle.CretaeROI(DealImageProcess.ParMCircle,System.Collections.Hashtable,HalconDotNet.HObject@)">
            <summary>
            求取分段的ROI
            </summary>
            <param name="par"></param>
            <param name="htResult"></param>
            <param name="ho_ROI"></param>
            <returns></returns>
        </member>
        <member name="T:DealImageProcess.ParMCircle">
            <summary>
            M圆参数类
            </summary>
        </member>
        <member name="P:DealImageProcess.ParMCircle.PathTemplate">
            <summary>
            参数模板路径
            </summary>
        </member>
        <member name="P:DealImageProcess.ParMCircle.Amplitude">
            <summary>
            边缘幅度
            </summary>
        </member>
        <member name="P:DealImageProcess.ParMCircle.Sigma">
            <summary>
            平滑系数
            </summary>
        </member>
        <member name="P:DealImageProcess.ParMCircle.BiliPreDelete">
            <summary>
            预剔点比例
            </summary>
        </member>
        <member name="P:DealImageProcess.ParMCircle.BlDisplayEffectPoint">
            <summary>
            显示有效点
            </summary>
        </member>
        <member name="P:DealImageProcess.ParMCircle.Interpolation_e">
            <summary>
            差值方法
            </summary>
        </member>
        <member name="P:DealImageProcess.ParMCircle.TypePolarity_e">
            <summary>
            极性
            </summary>
        </member>
        <member name="P:DealImageProcess.ParMCircle.TypeSelectLine_e">
            <summary>
            边缘筛选
            </summary>
        </member>
        <member name="M:DealImageProcess.ParMCircle.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:DealImageProcess.ParMCircle.Init(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            这里需要初始化一个Mircle
            </summary>
        </member>
        <member name="P:DealImageProcess.ParMCircle.ResultHObject_L">
            <summary>
            输出数据结果列表
            </summary>
        </member>
        <member name="M:DealImageProcess.ParMCircle.ReadXmlRoot(System.Xml.XmlDocument)">
            <summary>
            初始化加载的时候读取根元素     
            </summary>
        </member>
        <member name="M:DealImageProcess.ParMCircle.ReadXmlRoot(System.Xml.XmlElement)">
            <summary>
            记载整个配置文件的时候，读取参数
            </summary>
            <param name="xeRoot">根节点</param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParMCircle.ReadXmlPar(System.Xml.XmlElement)">
            <summary>
            读取算法参数
            </summary>
            <param name="xeRoot">根节点</param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParMCircle.ReadOutputInit(System.Object)">
            <summary>
            读取输出，里面的参数单独修改了
            </summary>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParMCircle.WriteXmlRoot(System.Xml.XmlElement)">
            <summary>
            写入Xml
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParMCircle.WriteXmlPar(System.Xml.XmlElement)">
            <summary>
            算法参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="T:DealImageProcess.UCMCircle">
            <summary>
            UCMCircle.xaml 的交互逻辑
            </summary>
            <summary>
            UCMCircle
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMCircle.Init(DealImageProcess.ParMCircle,System.Collections.Generic.List{BasicComprehensive.CellReference},System.Collections.Generic.List{BasicComprehensive.CellHObjectReference})">
            <summary>
            参数初始化
            </summary>
            <param name="parMCircle"></param>
            <param name="cellTemp_L">模板单元</param>
        </member>
        <member name="M:DealImageProcess.UCMCircle.dudAmplitude_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            幅度
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMCircle.dudSigma_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            平滑系数
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMCircle.cboInterpolation_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            插值
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMCircle.cboPolarity_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            极性
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMCircle.cboSelectLine_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            直线筛选
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMCircle.cboNoLine_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            直线序号
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCMCircle.dudPreBiliDelete_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            预剔除点比例
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMCircle.tsbDisplayEffectPoint_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            是否显示剔除后点位
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMCircle.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.UCParROIMCircle">
            <summary>
            UCParROIMCircle.xaml 的交互逻辑
            </summary>
            <summary>
            UCParROIMCircle
            </summary>
        </member>
        <member name="M:DealImageProcess.UCParROIMCircle.dudWidthRect2_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            矩形2尺寸
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCParROIMCircle.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.WinMCircle">
            <summary>
            WinMCircle.xaml 的交互逻辑
            </summary>
            <summary>
            WinMCircle
            </summary>
        </member>
        <member name="M:DealImageProcess.WinMCircle.LoginEvent">
            <summary>
            事件注册
            </summary>
        </member>
        <member name="M:DealImageProcess.WinMCircle.Init(DealImageProcess.ParMCircle,Camera.BaseUCDisplayCamera,System.Collections.Generic.List{BasicComprehensive.CellReference},System.Collections.Generic.List{BasicComprehensive.CellHObjectReference},System.Collections.Generic.List{BasicComprehensive.CellReference},System.Collections.Hashtable)">
            <summary>
            初始化参数
            </summary>      
        </member>
        <member name="M:DealImageProcess.WinMCircle.btnSaveOnly_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            仅仅保存
            </summary>
        </member>
        <member name="M:DealImageProcess.WinMCircle.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.WinMCircleDirection">
            <summary>
            WinMCircleDirection.xaml 的交互逻辑
            </summary>
            <summary>
            WinMCircleDirection
            </summary>
        </member>
        <member name="M:DealImageProcess.WinMCircleDirection.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:DealImageProcess.ParSharpness.ResultHObject_L">
            <summary>
            输出数据结果列表
            </summary>
        </member>
        <member name="M:DealImageProcess.ParSharpness.ReadXmlRoot(System.Xml.XmlDocument)">
            <summary>
            初始化加载
            </summary>
            <param name="xDoc">Stream文档</param>
            <returns></returns>  
        </member>
        <member name="M:DealImageProcess.ParSharpness.ReadXmlRoot(System.Xml.XmlElement)">
            <summary>
            从本地文档读取参数的时候，读取
            </summary>
            <param name="xeRoot">根节点</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:DealImageProcess.ParSharpness.ReadXmlPar(System.Xml.XmlElement)">
            <summary>
            读取该算法的参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParSharpness.WriteXmlRoot(System.Xml.XmlDocument)">
            <summary>
            从Stream资源读取完整节点后，写入参数
            </summary>
        </member>
        <member name="M:DealImageProcess.ParSharpness.WriteXmlRoot(System.Xml.XmlElement)">
            <summary>
            从Stream资源读取完整节点后，写入参数
            </summary>
            <param name="xDoc"></param>
            <returns></returns>
        </member>
        <member name="T:DealImageProcess.UCSharpness">
            <summary>
            UCSharpness.xaml 的交互逻辑
            </summary>
            <summary>
            UCSharpness
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSharpness.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.WinSharpness">
            <summary>
            WinSharpness.xaml 的交互逻辑
            </summary>
            <summary>
            WinSharpness
            </summary>
        </member>
        <member name="M:DealImageProcess.WinSharpness.LoginEvent">
            <summary>
            事件注册
            </summary>
        </member>
        <member name="M:DealImageProcess.WinSharpness.btnSaveOnly_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            仅仅保存
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.WinSharpness.btnSave_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            保存并且退出
            </summary>
        </member>
        <member name="M:DealImageProcess.WinSharpness.RefreshOutputImageProcessInit">
            <summary>
            刷新显示结果
            </summary>
        </member>
        <member name="M:DealImageProcess.WinSharpness.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.SmallestSurround_enum">
            <summary>
            包络类型
            </summary>
        </member>
        <member name="T:DealImageProcess.ShapeTrans_enum">
            <summary>
            形状修正类型
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseParImageP_PreImageP.Init(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            插入算法单元的时候，输入相关的插入参数
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseParImageP_PreImageP.ChangeClonePar(System.String,System.Int32)">
            <summary>
            改变拷贝后单元应有的参数
            </summary>
            <param name="nameCell">单元名称</param>
            <param name="pos">位置数</param>
        </member>
        <member name="M:DealImageProcess.BaseParImageP_PreImageP.ReadXmlChildInit(System.Xml.XmlElement)">
            <summary>
            初始化读取参数，和ReadXmlChild方法相比，只是不读取基础属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.BaseParImageP_PreImageP.ReadOutputInit(System.Object)">
            <summary>
            读取输出
            </summary>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.BaseParImageP_PreImageP.ReadXmlChild(System.Xml.XmlElement)">
            <summary>
            读取子元素的参数
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseParImageP_PreImageP.ReadXmlChild(System.Xml.XmlElement,System.Xml.XmlElement)">
            读取全局参数
        </member>
        <member name="M:DealImageProcess.BaseParImageP_PreImageP.WriteXmlChild(System.Xml.XmlElement)">
            <summary>
            在根节点中，写入参数
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseParImageP_PreImageP.WriteXmlChild(System.Xml.XmlElement,System.Xml.XmlElement)">
            <summary>
            全局
            </summary>
        </member>
        <member name="M:DealImageProcess.ParNccTMCrossLines.Init(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            插入算法单元的时候，输入相关的插入参数
            </summary>      
        </member>
        <member name="P:DealImageProcess.ParNccTMCrossLines.ResultHObject_L">
            <summary>
            输出数据结果列表
            </summary>
        </member>
        <member name="M:DealImageProcess.ParNccTMCrossLines.ReadXmlRoot(System.Xml.XmlDocument)">
            <summary>
            初始化加载,基础参数为UI设置单元算法时传入
            </summary>
            <param name="xDoc">Stream文档</param>
            <returns></returns>  
        </member>
        <member name="M:DealImageProcess.ParNccTMCrossLines.ReadXmlRoot(System.Xml.XmlElement)">
            <summary>
            从本地文档读取参数的时候，读取
            </summary>
            <param name="xeRoot">根节点</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:DealImageProcess.ParNccTMCrossLines.ReadXmlPar(System.Xml.XmlElement)">
            <summary>
            读取算法参数
            </summary>
            <param name="xeRoot">算法参数根节点</param>
            <returns>成功</returns>
        </member>
        <member name="M:DealImageProcess.ParNccTMCrossLines.WriteXmlRoot(System.Xml.XmlElement)">
            <summary>
            从Stream资源读取完整节点后，写入参数
            </summary>
        </member>
        <member name="M:DealImageProcess.ParNccTMCrossLines.WriteXmlPar(System.Xml.XmlElement)">
            <summary>
            该算法参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="T:DealImageProcess.UCNccTMCrossLines">
            <summary>
            UCCrossLines.xaml 的交互逻辑
            </summary>
            <summary>
            UCNccTMCrossLines
            </summary>
        </member>
        <member name="M:DealImageProcess.UCNccTMCrossLines.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.WinNccTMCrossLines">
            <summary>
            WinCrossLines.xaml 的交互逻辑
            </summary>
            <summary>
            WinNccTMCrossLines
            </summary>
        </member>
        <member name="M:DealImageProcess.WinNccTMCrossLines.LoginEvent">
            <summary>
            事件注册
            </summary>
        </member>
        <member name="M:DealImageProcess.WinNccTMCrossLines.uCMakeTemp_ModelID_event(System.String,DealResult.ResultTemplate)">
            <summary>
            响应制作模板控件输出的模板ID，并输出给DealComprehensive类
            </summary>
        </member>
        <member name="M:DealImageProcess.WinNccTMCrossLines.uCMakeTemp_SaveROI_event">
            <summary>
            触发保存更改的ROI坐标
            </summary>
        </member>
        <member name="M:DealImageProcess.WinNccTMCrossLines.btnSaveOnly_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            仅仅保存
            </summary>
        </member>
        <member name="M:DealImageProcess.WinNccTMCrossLines.btnSave_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            保存且退出
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.WinNccTMCrossLines.RefreshOutputImageProcessInit">
            <summary>
            刷新显示结果
            </summary>
        </member>
        <member name="M:DealImageProcess.WinNccTMCrossLines.ClearTempWin">
            <summary>
            清除模板的窗体
            </summary>
        </member>
        <member name="M:DealImageProcess.WinNccTMCrossLines.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:DealImageProcess.ParScaleShapeTMCrossLines.Init(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            插入算法单元的时候，输入相关的插入参数
            </summary>      
        </member>
        <member name="P:DealImageProcess.ParScaleShapeTMCrossLines.ResultHObject_L">
            <summary>
            输出数据结果列表
            </summary>
        </member>
        <member name="M:DealImageProcess.ParScaleShapeTMCrossLines.ReadXmlRoot(System.Xml.XmlDocument)">
            <summary>
            初始化加载,基础参数为UI设置单元算法时传入
            </summary>
            <param name="xDoc">Stream文档</param>
            <returns></returns>  
        </member>
        <member name="M:DealImageProcess.ParScaleShapeTMCrossLines.ReadXmlRoot(System.Xml.XmlElement)">
            <summary>
            从本地文档读取参数的时候，读取
            </summary>
            <param name="xeRoot">根节点</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:DealImageProcess.ParScaleShapeTMCrossLines.ReadXmlPar(System.Xml.XmlElement)">
            <summary>
            读取算法参数
            </summary>
            <param name="xeRoot">算法参数根节点</param>
            <returns>成功</returns>
        </member>
        <member name="M:DealImageProcess.ParScaleShapeTMCrossLines.WriteXmlRoot(System.Xml.XmlElement)">
            <summary>
            从Stream资源读取完整节点后，写入参数
            </summary>
        </member>
        <member name="M:DealImageProcess.ParScaleShapeTMCrossLines.WriteXmlPar(System.Xml.XmlElement)">
            <summary>
            该算法参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="T:DealImageProcess.UCScaleShapeTMCrossLines">
            <summary>
            UCCrossLines.xaml 的交互逻辑
            </summary>
            <summary>
            UCScaleShapeTMCrossLines
            </summary>
        </member>
        <member name="M:DealImageProcess.UCScaleShapeTMCrossLines.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.WinScaleShapeTMCrossLines">
            <summary>
            WinCrossLines.xaml 的交互逻辑
            </summary>
            <summary>
            WinScaleShapeTMCrossLines
            </summary>
        </member>
        <member name="M:DealImageProcess.WinScaleShapeTMCrossLines.LoginEvent">
            <summary>
            事件注册
            </summary>
        </member>
        <member name="M:DealImageProcess.WinScaleShapeTMCrossLines.uCMakeTemp_ModelID_event(System.String,DealResult.ResultTemplate)">
            <summary>
            响应制作模板控件输出的模板ID，并输出给DealComprehensive类
            </summary>
        </member>
        <member name="M:DealImageProcess.WinScaleShapeTMCrossLines.uCMakeTemp_SaveROI_event">
            <summary>
            触发保存更改的ROI坐标
            </summary>
        </member>
        <member name="M:DealImageProcess.WinScaleShapeTMCrossLines.btnSaveOnly_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            仅仅保存
            </summary>
        </member>
        <member name="M:DealImageProcess.WinScaleShapeTMCrossLines.btnSave_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            保存且退出
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.WinScaleShapeTMCrossLines.RefreshOutputImageProcessInit">
            <summary>
            刷新显示结果
            </summary>
        </member>
        <member name="M:DealImageProcess.WinScaleShapeTMCrossLines.ClearTempWin">
            <summary>
            清除模板的窗体
            </summary>
        </member>
        <member name="M:DealImageProcess.WinScaleShapeTMCrossLines.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:DealImageProcess.ParNccT.Init_AuthorityCtr">
            <summary>
            初始化参数
            </summary>
        </member>
        <member name="P:DealImageProcess.ParNccT.ResultHObject_L">
            <summary>
            输出数据结果列表
            </summary>
        </member>
        <member name="M:DealImageProcess.ParNccT.ReadXmlRoot(System.Xml.XmlDocument)">
            <summary>
            初始化加载
            </summary>
            <param name="xDoc">Stream文档</param>
            <returns></returns>  
        </member>
        <member name="M:DealImageProcess.ParNccT.ReadXmlRoot(System.Xml.XmlElement)">
            <summary>
            从本地文档读取参数的时候，读取
            </summary>
            <param name="xeRoot">根节点</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:DealImageProcess.ParNccT.ReadXmlPar(System.Xml.XmlElement)">
            <summary>
            读取该算法的参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParNccT.WriteXmlRoot(System.Xml.XmlElement)">
            <summary>
            从Stream资源读取完整节点后，写入参数
            </summary>
        </member>
        <member name="T:DealImageProcess.UCNccT">
            <summary>
            UCSetNcc.xaml 的交互逻辑
            </summary>
            <summary>
            UCNccT
            </summary>
        </member>
        <member name="M:DealImageProcess.UCNccT.Init(DealImageProcess.ParNccT,System.Collections.Generic.List{System.String},System.Collections.Generic.List{BasicComprehensive.CellReference},System.Collections.Generic.List{BasicComprehensive.CellHObjectReference})">
            <summary>
            参数初始化
            </summary>
            <param name="parScaledShape"></param>
            <param name="cellTemp_L">模板单元</param>
        </member>
        <member name="M:DealImageProcess.UCNccT.dudXMin_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            X范围
            </summary>
        </member>
        <member name="M:DealImageProcess.UCNccT.dudAngleStart_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            角度范围
            </summary>
        </member>
        <member name="M:DealImageProcess.UCNccT.dudAngleStep_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            角度步长
            </summary>
        </member>
        <member name="M:DealImageProcess.UCNccT.dudMinScore_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            最小匹配度
            </summary>
        </member>
        <member name="M:DealImageProcess.UCNccT.dudNumMatches_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            匹配数
            </summary>
        </member>
        <member name="M:DealImageProcess.UCNccT.dudMaxOverlap_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            最大交叠
            </summary>
        </member>
        <member name="M:DealImageProcess.UCNccT.dudNumLevels_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            金字塔级数
            </summary>
        </member>
        <member name="M:DealImageProcess.UCNccT.cboSubPixel_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            亚像素
            </summary>
        </member>
        <member name="M:DealImageProcess.UCNccT.cboSort_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            坐标排序
            </summary>
        </member>
        <member name="M:DealImageProcess.UCNccT.tsbUsePreImage_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            是否使用预处理
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCNccT.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.UCNccT_Temp">
            <summary>
            CreatNccT.xaml 的交互逻辑
            </summary>
            <summary>
            UCNccT_Temp
            </summary>
        </member>
        <member name="M:DealImageProcess.UCNccT_Temp.dudMarginX_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            模板边界间距
            </summary>
        </member>
        <member name="M:DealImageProcess.UCNccT_Temp.cboOutTypeImage_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            模板图像输出类型
            </summary>
        </member>
        <member name="M:DealImageProcess.UCNccT_Temp.tsbUseAlgorithm_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            是否使用算法求包络
            </summary>
        </member>
        <member name="M:DealImageProcess.UCNccT_Temp.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.WinNccT">
            <summary>
            DealNccWindow.xaml 的交互逻辑
            </summary>
            <summary>
            WinNccT
            </summary>
        </member>
        <member name="M:DealImageProcess.WinNccT.LoginEvent">
            <summary>
            事件注册
            </summary>
        </member>
        <member name="M:DealImageProcess.WinNccT.uCMakeTemp_ModelID_event(System.String,DealResult.ResultTemplate)">
            <summary>
            响应制作模板控件输出的模板ID，并输出给DealComprehensive类
            </summary>
        </member>
        <member name="M:DealImageProcess.WinNccT.uCMakeTemp_SaveROI_event">
            <summary>
            触发保存更改的ROI坐标
            </summary>
        </member>
        <member name="M:DealImageProcess.WinNccT.btnSave_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            保存参数到本地并且退出
            </summary>
        </member>
        <member name="M:DealImageProcess.WinNccT.RefreshOutputImageProcessInit">
            <summary>
            刷新显示结果
            </summary>
        </member>
        <member name="M:DealImageProcess.WinNccT.ClearTempWin">
            <summary>
            清除模板的窗体
            </summary>
        </member>
        <member name="M:DealImageProcess.WinNccT.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:DealImageProcess.ParScaledShapeT.ResultHObject_L">
            <summary>
            输出数据结果列表
            </summary>
        </member>
        <member name="M:DealImageProcess.ParScaledShapeT.ReadXmlRoot(System.Xml.XmlDocument)">
            <summary>
            初始化加载,基础参数为UI设置单元算法时传入
            </summary>
            <param name="xDoc">Stream文档</param>
            <returns></returns>  
        </member>
        <member name="M:DealImageProcess.ParScaledShapeT.ReadXmlRoot(System.Xml.XmlElement)">
            <summary>
            从本地文档读取参数的时候，读取
            </summary>
            <param name="xeRoot">根节点</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:DealImageProcess.ParScaledShapeT.ReadXmlPar(System.Xml.XmlElement)">
            <summary>
            读取算法参数
            </summary>
            <param name="xeRoot">算法参数根节点</param>
            <returns>成功</returns>
        </member>
        <member name="M:DealImageProcess.ParScaledShapeT.WriteXmlRoot(System.Xml.XmlElement)">
            <summary>
            从Stream资源读取完整节点后，写入参数
            </summary>
        </member>
        <member name="M:DealImageProcess.ParScaledShapeT.WriteXmlPar(System.Xml.XmlElement)">
            <summary>
            该算法参数
            </summary>
        </member>
        <member name="T:DealImageProcess.UCScaledShapeT">
            <summary>
            DealScaledShape.xaml 的交互逻辑
            </summary>
            <summary>
            UCScaledShapeT
            </summary>
        </member>
        <member name="M:DealImageProcess.UCScaledShapeT.Init(DealImageProcess.ParScaledShapeT,System.Collections.Generic.List{System.String},System.Collections.Generic.List{BasicComprehensive.CellReference},System.Collections.Generic.List{BasicComprehensive.CellHObjectReference})">
            <summary>
            参数初始化
            </summary>
            <param name="parScaledShape"></param>
            <param name="cellTemp_L">模板单元</param>
        </member>
        <member name="M:DealImageProcess.UCScaledShapeT.dudXMin_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            X范围
            </summary>
        </member>
        <member name="M:DealImageProcess.UCScaledShapeT.dudAngleStart_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            角度起始
            </summary>
        </member>
        <member name="M:DealImageProcess.UCScaledShapeT.dudScaleMin_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            缩放范围
            </summary>
        </member>
        <member name="M:DealImageProcess.UCScaledShapeT.dudMinScore_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            最小分数
            </summary>
        </member>
        <member name="M:DealImageProcess.UCScaledShapeT.dudNumMatches_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            匹配数
            </summary>
        </member>
        <member name="M:DealImageProcess.UCScaledShapeT.dudMaxOverlap_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            最大交叠
            </summary>
        </member>
        <member name="M:DealImageProcess.UCScaledShapeT.dudNumLevels_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            金字塔级数
            </summary>
        </member>
        <member name="M:DealImageProcess.UCScaledShapeT.dudGreediness_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            贪心算法
            </summary>
        </member>
        <member name="M:DealImageProcess.UCScaledShapeT.cboSubPixel_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            亚像素
            </summary>
        </member>
        <member name="M:DealImageProcess.UCScaledShapeT.cboDeformation_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            最大可变形
            </summary>
        </member>
        <member name="M:DealImageProcess.UCScaledShapeT.cboSort_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            坐标排序
            </summary>
        </member>
        <member name="M:DealImageProcess.UCScaledShapeT.dudThRowColumn_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            行列阈值
            </summary>
        </member>
        <member name="M:DealImageProcess.UCScaledShapeT.cboGrayJudge_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            灰度值辅助判断
            </summary>
        </member>
        <member name="M:DealImageProcess.UCScaledShapeT.dudMinGray_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            灰度值范围
            </summary>
        </member>
        <member name="M:DealImageProcess.UCScaledShapeT.tsbUsePreImage_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            是否使用预处理
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCScaledShapeT.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.UCScaledShapeT_Temp">
            <summary>
            CreatScaledShape.xaml 的交互逻辑
            </summary>
            <summary>
            UCScaledShapeT_Temp
            </summary>
        </member>
        <member name="M:DealImageProcess.UCScaledShapeT_Temp.cboTypeCenter_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            中心点类型
            </summary>
        </member>
        <member name="M:DealImageProcess.UCScaledShapeT_Temp.dudSigma_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            轮廓平滑
            </summary>
        </member>
        <member name="M:DealImageProcess.UCScaledShapeT_Temp.dudMarginX_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            模板边界间距
            </summary>
        </member>
        <member name="M:DealImageProcess.UCScaledShapeT_Temp.cboOutTypeImage_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            模板图像输出类型
            </summary>
        </member>
        <member name="M:DealImageProcess.UCScaledShapeT_Temp.tsbUseAlgorithm_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            是否使用算法求包络
            </summary>
        </member>
        <member name="M:DealImageProcess.UCScaledShapeT_Temp.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.WinScaledShapeT">
            <summary>
            DealScaledShapeWindow.xaml 的交互逻辑
            </summary>
            <summary>
            WinScaledShapeT
            </summary>
        </member>
        <member name="M:DealImageProcess.WinScaledShapeT.LoginEvent">
            <summary>
            事件注册
            </summary>
        </member>
        <member name="M:DealImageProcess.WinScaledShapeT.uCMakeTemp_ModelID_event(System.String,DealResult.ResultTemplate)">
            <summary>
            响应制作模板控件输出的模板ID，并输出给DealComprehensive类
            </summary>
        </member>
        <member name="M:DealImageProcess.WinScaledShapeT.uCMakeTemp_SaveROI_event">
            <summary>
            触发保存更改的ROI坐标
            </summary>
        </member>
        <member name="M:DealImageProcess.WinScaledShapeT.btnSave_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            保存参数到本地并且退出
            </summary>
        </member>
        <member name="M:DealImageProcess.WinScaledShapeT.RefreshOutputImageProcessInit">
            <summary>
            刷新显示结果
            </summary>
        </member>
        <member name="M:DealImageProcess.WinScaledShapeT.ClearTempWin">
            <summary>
            清除模板的窗体
            </summary>
        </member>
        <member name="M:DealImageProcess.WinScaledShapeT.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.WinSetTempMask">
            <summary>
            WinSetTempMask.xaml 的交互逻辑
            </summary>
            <summary>
            WinSetTempMask
            </summary>
        </member>
        <member name="M:DealImageProcess.WinSetTempMask.GetWinInst">
            <summary>
            返回窗体实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.WinSetTempMask.CopyMaskImageInit">
            <summary>
            备份模板掩膜
            </summary>
        </member>
        <member name="M:DealImageProcess.WinSetTempMask.cboTypeEraser_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            橡皮擦类型
            </summary>
        </member>
        <member name="M:DealImageProcess.WinSetTempMask.dudWidth_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            橡皮擦尺寸
            </summary>
        </member>
        <member name="M:DealImageProcess.WinSetTempMask.cboColor_ColorChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.String})">
            <summary>
            橡皮擦颜色
            </summary>
        </member>
        <member name="M:DealImageProcess.WinSetTempMask.cboTypeFill_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            橡皮填充
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.WinSetTempMask.btnDel_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            删除
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.WinSetTempMask.dgResultImage_MouseDoubleClick(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            显示选中的掩膜
            </summary>
        </member>
        <member name="M:DealImageProcess.WinSetTempMask.tsbShowMask_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            是否显示掩膜
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.WinSetTempMask.CreateTempAndMask">
            <summary>
            显示模板轮廓，掩膜
            </summary>
        </member>
        <member name="M:DealImageProcess.WinSetTempMask.ShowByEraser">
            <summary>
            根据橡皮擦得类型显示名称
            </summary>
        </member>
        <member name="M:DealImageProcess.WinSetTempMask.ShowTempAndMask">
            <summary>
            显示模板轮廓，掩膜
            </summary>
        </member>
        <member name="M:DealImageProcess.WinSetTempMask.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:DealImageProcess.ParMeasureCircle.ResultHObject_L">
            <summary>
            输出数据结果列表
            </summary>
        </member>
        <member name="M:DealImageProcess.ParMeasureCircle.Init(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            插入算法单元的时候，输入相关的插入参数
            </summary>      
        </member>
        <member name="M:DealImageProcess.ParMeasureCircle.ReadXmlRoot(System.Xml.XmlDocument)">
            <summary>
            初始化加载,基础参数为UI设置单元算法时传入
            </summary>
        </member>
        <member name="M:DealImageProcess.ParMeasureCircle.ReadXmlRoot(System.Xml.XmlElement)">
            <summary>
            从本地文档读取参数的时候，读取
            </summary>
            <param name="xeRoot">根节点</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:DealImageProcess.ParMeasureCircle.ReadXmlPar(System.Xml.XmlElement)">
            <summary>
            读取算法参数
            </summary>
            <param name="xeRoot">算法参数根节点</param>
            <returns>成功</returns>
        </member>
        <member name="M:DealImageProcess.ParMeasureCircle.WriteXmlRoot(System.Xml.XmlDocument)">
            <summary>
            从Stream资源读取完整节点后，写入参数
            </summary>
        </member>
        <member name="M:DealImageProcess.ParMeasureCircle.WriteXmlRoot(System.Xml.XmlElement)">
            <summary>
            从Stream资源读取完整节点后，写入参数
            </summary>
        </member>
        <member name="M:DealImageProcess.ParMeasureCircle.WriteXmlPar(System.Xml.XmlElement)">
            <summary>
            该算法参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="T:DealImageProcess.UCMeasureCircle">
            <summary>
            UCMeasureCircle.xaml 的交互逻辑
            </summary>
            <summary>
            UCMeasureCircle
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMeasureCircle.Init(DealImageProcess.ParMeasureCircle,System.Collections.Generic.List{BasicComprehensive.CellReference},System.Collections.Generic.List{BasicComprehensive.CellHObjectReference})">
            <summary>
            参数初始化
            </summary>
            <param name="parScaledShape"></param>
            <param name="cellTemp_L">模板单元</param>
        </member>
        <member name="M:DealImageProcess.UCMeasureCircle.dudMinRange_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            最小边缘幅度
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMeasureCircle.dudSigma_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            sigma
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMeasureCircle.cboInterpolation_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            插值方法
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMeasureCircle.cboTransition_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            边缘过渡
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMeasureCircle.cboSelect_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            边缘位置
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMeasureCircle.chkPrecise_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            最高精度
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMeasureCircle.dudAdjustDis_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            补偿值
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMeasureCircle.tsbFirstLast_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            只测量首尾
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMeasureCircle.dudRemoveMax_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            剔除最大最小
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMeasureCircle.tsbDisplayEffectPoint_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            显示剔除后的点
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMeasureCircle.tsbGlobalPar_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            是否使用全局变量
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMeasureCircle.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.WinMeasureCircle">
            <suMary>
            WinMeasureCircle.xaml 的交互逻辑
            </suMary>
            <summary>
            WinMeasureCircle
            </summary>
        </member>
        <member name="M:DealImageProcess.WinMeasureCircle.LoginEvent">
            <suMary>
            事件注册
            </suMary>
        </member>
        <member name="M:DealImageProcess.WinMeasureCircle.Init(DealImageProcess.ParMeasureCircle,Camera.BaseUCDisplayCamera,System.Collections.Generic.List{BasicComprehensive.CellReference},System.Collections.Generic.List{BasicComprehensive.CellHObjectReference},System.Collections.Generic.List{BasicComprehensive.CellReference},System.Collections.Hashtable)">
            <suMary>
            初始化参数
            </suMary>      
        </member>
        <member name="M:DealImageProcess.WinMeasureCircle.btnSaveOnly_Click(System.Object,System.Windows.RoutedEventArgs)">
            <suMary>
            仅仅保存
            </suMary>
        </member>
        <member name="M:DealImageProcess.WinMeasureCircle.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:DealImageProcess.FunSimpleOCR.SplitOCR(System.String,System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Double,System.Int32,System.Collections.Generic.List{System.Collections.Generic.List{System.Double}}@,System.Collections.Generic.List{System.Collections.Generic.List{System.Double}}@)">
            <summary>
            分割字符行列
            </summary>
        </member>
        <member name="P:DealImageProcess.ParSimpleOCR.ResultHObject_L">
            <summary>
            输出数据结果列表
            </summary>
        </member>
        <member name="M:DealImageProcess.ParSimpleOCR.ReadXmlRoot(System.Xml.XmlDocument)">
            <summary>
            初始化加载的时候读取根元素     
            </summary>
            <param name="xDoc"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParSimpleOCR.ReadXmlRoot(System.Xml.XmlElement)">
            <summary>
            记载整个配置文件的时候，读取参数
            </summary>
            <param name="xeRoot">根节点</param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParSimpleOCR.ReadXmlPar(System.Xml.XmlElement)">
            <summary>
            读取算法参数
            </summary>
            <param name="xeRoot">根节点</param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParSimpleOCR.WriteXmlPar(System.Xml.XmlElement)">
            <summary>
            算法参数
            </summary>
        </member>
        <member name="T:DealImageProcess.UCSimpleOCR">
            <summary>
            UCSimpleOCR.xaml 的交互逻辑
            </summary>
            <summary>
            UCSimpleOCR
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSimpleOCR.cboOCRFile_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            字符库
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCSimpleOCR.cboLightDark_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            字符亮暗
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCSimpleOCR.dudNumLine_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            行数
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCSimpleOCR.tsbCalibOrient_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            角度校准
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCSimpleOCR.cboTypeSort_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            排序类型
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCSimpleOCR.tsbCompareStd_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            比对标准字符
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCSimpleOCR.btnSetFont_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            选择自定义字符库
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCSimpleOCR.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.WinSimpleOCR">
            <summary>
            WinSimpleOCR.xaml 的交互逻辑
            </summary>
            <summary>
            WinSimpleOCR
            </summary>
        </member>
        <member name="M:DealImageProcess.WinSimpleOCR.LoginEvent">
            <summary>
            事件注册
            </summary>
        </member>
        <member name="M:DealImageProcess.WinSimpleOCR.btnSave_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            保存参数到本地并且退出
            </summary>
        </member>
        <member name="M:DealImageProcess.WinSimpleOCR.RefreshOutputImageProcessInit">
            <summary>
            刷新显示结果
            </summary>
        </member>
        <member name="M:DealImageProcess.WinSimpleOCR.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:DealImageProcess.ParPaintGray.ReadXmlRoot(System.Xml.XmlDocument)">
            <summary>
            初始化加载的时候读取根元素     
            </summary>
            <param name="xDoc"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParPaintGray.ReadXmlRoot(System.Xml.XmlElement)">
            <summary>
            记载整个配置文件的时候，读取参数
            </summary>
            <param name="xeRoot">根节点</param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParPaintGray.ReadXmlPar(System.Xml.XmlElement)">
            <summary>
            读取算法参数
            </summary>
            <param name="xeRoot">根节点</param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParPaintGray.WriteXmlRoot(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParPaintGray.WriteXmlPar(System.Xml.XmlElement)">
            <summary>
            算法参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="T:DealImageProcess.UCPaintGray">
            <summary>
            UCPaintGray.xaml 的交互逻辑
            </summary>
            <summary>
            UCPaintGray
            </summary>
        </member>
        <member name="M:DealImageProcess.UCPaintGray.cboTypePaintGray_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            算法类型
            </summary>
        </member>
        <member name="M:DealImageProcess.UCPaintGray.cboTypeEraser_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            橡皮擦类型
            </summary>
        </member>
        <member name="M:DealImageProcess.UCPaintGray.dudWidth_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            橡皮擦尺寸
            </summary>
        </member>
        <member name="M:DealImageProcess.UCPaintGray.dudGay_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            橡皮擦灰度值
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCPaintGray.ShowByEraser">
            <summary>
            根据橡皮擦得类型显示名称
            </summary>
        </member>
        <member name="M:DealImageProcess.UCPaintGray.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.WinPaintGray">
            <summary>
            WinPaintGray.xaml 的交互逻辑
            </summary>
            <summary>
            WinPaintGray
            </summary>
        </member>
        <member name="M:DealImageProcess.WinPaintGray.btnGetGray_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            获取橡皮擦灰度
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.WinPaintGray.btnPaint_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            擦除图像
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.WinPaintGray.dgResultImage_MouseDoubleClick(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            选择中间过程图像
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.WinPaintGray.btnDel_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            删除选择图片
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.WinPaintGray.btnSaveImage_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            讲擦除得图片存储到本地
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.WinPaintGray.btnSaveOnly_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            保存
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.WinPaintGray.btnSave_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            保存并且退出
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.WinPaintGray.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.ParPointCV">
            <summary>
            使用OpenCV的棋盘格求取算法求角点
            </summary>
        </member>
        <member name="M:DealImageProcess.ParPointCV.ReadXmlRoot(System.Xml.XmlDocument)">
            <summary>
            初始化加载的时候读取根元素     
            </summary>
        </member>
        <member name="M:DealImageProcess.ParPointCV.ReadXmlRoot(System.Xml.XmlElement)">
            <summary>
            记载整个配置文件的时候，读取参数
            </summary>
            <param name="xeRoot">根节点</param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParPointCV.ReadXmlPar(System.Xml.XmlElement)">
            <summary>
            读取算法参数
            </summary>
            <param name="xeRoot">根节点</param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParPointCV.WriteXmlRoot(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParPointCV.WriteXmlPar(System.Xml.XmlElement)">
            <summary>
            算法参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="T:DealImageProcess.UCPointCV">
            <summary>
            UCPointCV.xaml 的交互逻辑
            </summary>
            <summary>
            UCPointCV
            </summary>
        </member>
        <member name="M:DealImageProcess.UCPointCV.dudRowNum_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            行数
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCPointCV.dudColNum_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            列数
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCPointCV.cboSort_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            排列坐标
            </summary>
        </member>
        <member name="M:DealImageProcess.UCPointCV.dudXMin_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            X范围
            </summary>
        </member>
        <member name="M:DealImageProcess.UCPointCV.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.WinPointCV">
            <summary>
            WinPointCV.xaml 的交互逻辑
            </summary>
            <summary>
            WinPointCV
            </summary>
        </member>
        <member name="M:DealImageProcess.WinPointCV.RefreshOutputImageProcessInit">
            <summary>
            刷新显示结果
            </summary>
        </member>
        <member name="M:DealImageProcess.WinPointCV.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.ParPointHarris">
            <summary>
            Foerstner
            </summary>
            <summary>
            Harris
            </summary>
            <summary>
            HarrisBinomial
            </summary>
            <summary>
            Lepetit
            </summary>
            <summary>
            Saddle
            </summary>
            <summary>
            Sojka
            </summary>
        </member>
        <member name="P:DealImageProcess.ParPointHarris.ResultHObject_L">
            <summary>
            输出数据结果列表
            </summary>
        </member>
        <member name="M:DealImageProcess.ParPointHarris.ReadXmlRoot(System.Xml.XmlDocument)">
            <summary>
            初始化加载的时候读取根元素     
            </summary>
        </member>
        <member name="M:DealImageProcess.ParPointHarris.ReadXmlRoot(System.Xml.XmlElement)">
            <summary>
            记载整个配置文件的时候，读取参数
            </summary>
            <param name="xeRoot">根节点</param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParPointHarris.ReadXmlPar(System.Xml.XmlElement)">
            <summary>
            读取算法参数
            </summary>
            <param name="xeRoot">根节点</param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParPointHarris.WriteXmlRoot(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParPointHarris.WriteXmlPar(System.Xml.XmlElement)">
            <summary>
            算法参数
            </summary>
        </member>
        <member name="M:DealImageProcess.ParPointHarris.ReadXmlPar_Foerstner(System.Xml.XmlElement)">
            <summary>
            读取算法参数
            </summary>
            <param name="xeRoot">根节点</param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParPointHarris.WriteXmlPar_Foerstner(System.Xml.XmlElement)">
            <summary>
            算法参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParPointHarris.ReadXmlPar_Harris(System.Xml.XmlElement)">
            <summary>
            读取算法参数
            </summary>
            <param name="xeRoot">根节点</param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParPointHarris.WriteXmlPar_Harris(System.Xml.XmlElement)">
            <summary>
            算法参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParPointHarris.ReadXmlPar_HarrisBinomial(System.Xml.XmlElement)">
            <summary>
            读取算法参数
            </summary>
            <param name="xeRoot">根节点</param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParPointHarris.WriteXmlPar_HarrisBinomial(System.Xml.XmlElement)">
            <summary>
            算法参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParPointHarris.ReadXmlPar_Lepetit(System.Xml.XmlElement)">
            <summary>
            读取算法参数
            </summary>
            <param name="xeRoot">根节点</param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParPointHarris.WriteXmlPar_Lepetit(System.Xml.XmlElement)">
            <summary>
            算法参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParPointHarris.ReadXmlPar_Saddle(System.Xml.XmlElement)">
            <summary>
            读取算法参数
            </summary>
            <param name="xeRoot">根节点</param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParPointHarris.WriteXmlPar_Saddle(System.Xml.XmlElement)">
            <summary>
            算法参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParPointHarris.ReadXmlPar_Sojka(System.Xml.XmlElement)">
            <summary>
            读取算法参数
            </summary>
            <param name="xeRoot">根节点</param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParPointHarris.WriteXmlPar_Sojka(System.Xml.XmlElement)">
            <summary>
            算法参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="T:DealImageProcess.UCFoerstner">
            <summary>
            UCFoerstner.xaml 的交互逻辑
            </summary>
            <summary>
            UCFoerstner
            </summary>
        </member>
        <member name="M:DealImageProcess.UCFoerstner.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.UCHarris">
            <summary>
            UCHarris.xaml 的交互逻辑
            </summary>
            <summary>
            UCHarris
            </summary>
        </member>
        <member name="M:DealImageProcess.UCHarris.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.UCHarrisBinomial">
            <summary>
            UCHarrisBinomial.xaml 的交互逻辑
            </summary>
            <summary>
            UCHarrisBinomial
            </summary>
        </member>
        <member name="M:DealImageProcess.UCHarrisBinomial.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.UCLepetit">
            <summary>
            UCLepetit.xaml 的交互逻辑
            </summary>
            <summary>
            UCLepetit
            </summary>
        </member>
        <member name="M:DealImageProcess.UCLepetit.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.UCPointHarris">
            <summary>
            UCPointHarris.xaml 的交互逻辑
            </summary>
            <summary>
            UCPointHarris
            </summary>
        </member>
        <member name="M:DealImageProcess.UCPointHarris.cboSort_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            排列坐标
            </summary>
        </member>
        <member name="M:DealImageProcess.UCPointHarris.dudXMin_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            X范围
            </summary>
        </member>
        <member name="M:DealImageProcess.UCPointHarris.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.UCSaddle">
            <summary>
            UCSaddle.xaml 的交互逻辑
            </summary>
            <summary>
            UCSaddle
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSaddle.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.UCSojka">
            <summary>
            UCSojka.xaml 的交互逻辑
            </summary>
            <summary>
            UCSojka
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSojka.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.WinPointHarris">
            <summary>
            WinPointHarris.xaml 的交互逻辑
            </summary>
            <summary>
            WinPointHarris
            </summary>
        </member>
        <member name="M:DealImageProcess.WinPointHarris.RefreshOutputImageProcessInit">
            <summary>
            刷新显示结果
            </summary>
        </member>
        <member name="M:DealImageProcess.WinPointHarris.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:DealImageProcess.ParAffineImage.ResultHObject_L">
            <summary>
            输出数据结果列表
            </summary>
        </member>
        <member name="P:DealImageProcess.ParAffineImage.ResultHObjectForPre_L">
             <summary>
            预处理 输出数据结果列表
             </summary>
        </member>
        <member name="M:DealImageProcess.ParAffineImage.ReadXmlRoot(System.Xml.XmlElement)">
            <summary>
            加载本地文档参数时，从根节点中读取参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParAffineImage.ReadXmlChildInit(System.Xml.XmlElement)">
            <summary>
            从根节点中，初始化读取子元素
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParAffineImage.ReadXmlPar(System.Xml.XmlElement)">
            <summary>
            读取算法里面的参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="T:DealImageProcess.UCAffineImage">
            <summary>
            UCAffineImage.xaml 的交互逻辑
            </summary>
            <summary>
            UCAffineImage
            </summary>
        </member>
        <member name="M:DealImageProcess.UCAffineImage.Init(Camera.BaseUCDisplayCamera,DealImageProcess.BaseParImageProcess,System.Collections.Generic.List{BasicComprehensive.CellReference})">
            <summary>
            初始化20181203-zx
            </summary>
            <param name="baseUCCamera"></param>
            <param name="baseParImageProcess"></param>
            <param name="cellExe_L"></param>
        </member>
        <member name="M:DealImageProcess.UCAffineImage.cboCellAffine_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            引用校准单元
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCAffineImage.cboAlgorithm_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            图像插值算法
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCAffineImage.ShowCellAffine">
             <summary>
            显示校准单元
             </summary>
        </member>
        <member name="M:DealImageProcess.UCAffineImage.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.WinAffineImage">
            <summary>
            WinAffineImage.xaml 的交互逻辑
            </summary>
            <summary>
            WinAffineImage
            </summary>
        </member>
        <member name="M:DealImageProcess.WinAffineImage.RefreshOutputImageProcessInit">
            <summary>
            刷新显示结果
            </summary>
        </member>
        <member name="M:DealImageProcess.WinAffineImage.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:DealImageProcess.ParBinary.ReadXmlPar_Dyn(System.Xml.XmlElement)">
            <summary>
            读取Xml
            </summary>
            <param name="xeRoot"></param>
        </member>
        <member name="M:DealImageProcess.ParBinary.WriteXmlPar_Dyn(System.Xml.XmlElement)">
            <summary>
            写入Xml
            </summary>
            <param name="xeRoot"></param>
        </member>
        <member name="M:DealImageProcess.ParBinary.ReadXmlPar_Thresh(System.Xml.XmlElement)">
            <summary>
            读取Xml
            </summary>
            <param name="xeRoot"></param>
        </member>
        <member name="M:DealImageProcess.ParBinary.WriteXmlPar_Thresh(System.Xml.XmlElement)">
            <summary>
            写入Xml
            </summary>
            <param name="xeRoot"></param>
        </member>
        <member name="M:DealImageProcess.ParBinary.Init_AuthorityCtr">
            <summary>
            初始化参数
            </summary>
        </member>
        <member name="P:DealImageProcess.ParBinary.ResultHObject_L">
            <summary>
            输出数据结果列表
            </summary>
        </member>
        <member name="P:DealImageProcess.ParBinary.ResultHObjectForPre_L">
            <summary>
            算子嵌入时用
            </summary>
        </member>
        <member name="M:DealImageProcess.ParBinary.ReadXmlRoot(System.Xml.XmlElement)">
            <summary>
            加载本地文档参数时，从根节点中读取参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParBinary.ReadXmlPar(System.Xml.XmlElement)">
            <summary>
            读取算法里面的参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="T:DealImageProcess.UCBinary">
            <summary>
            UCBinary.xaml 的交互逻辑
            </summary>
            <summary>
            UCBinary
            </summary>
        </member>
        <member name="M:DealImageProcess.UCBinary.Init(Camera.BaseUCDisplayCamera,DealImageProcess.BaseParImageProcess,System.Collections.Generic.List{BasicComprehensive.CellHObjectReference})">
            <summary>
            初始化参数,独立算子
            </summary>
        </member>
        <member name="M:DealImageProcess.UCBinary.Init(Camera.BaseUCDisplayCamera,DealImageProcess.BaseParImageProcess)">
            <summary>
            嵌入其他算子
            </summary>
            <param name="baseUCCamera"></param>
            <param name="baseParImageProcess"></param>
        </member>
        <member name="M:DealImageProcess.UCBinary.dudDilation_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            连接细小断开
            </summary>
        </member>
        <member name="M:DealImageProcess.UCBinary.dudMinHeight_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            高度筛选
            </summary>
        </member>
        <member name="M:DealImageProcess.UCBinary.dudMinWidth_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            宽度筛选
            </summary>
        </member>
        <member name="M:DealImageProcess.UCBinary.dudBackgroundGray_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            背景灰度
            </summary>
        </member>
        <member name="M:DealImageProcess.UCBinary.cboImageOut_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            输出类型
            </summary>
        </member>
        <member name="M:DealImageProcess.UCBinary.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.UCBinaryDyn">
            <summary>
            UCBinaryDyn.xaml 的交互逻辑
            </summary>
            <summary>
            UCBinaryDyn
            </summary>
        </member>
        <member name="M:DealImageProcess.UCBinaryDyn.dudMaskX_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            均值图像掩膜
            </summary>
        </member>
        <member name="M:DealImageProcess.UCBinaryDyn.dudOffset_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            图像偏移
            </summary>
        </member>
        <member name="M:DealImageProcess.UCBinaryDyn.cboLightDark_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            亮暗
            </summary>
        </member>
        <member name="M:DealImageProcess.UCBinaryDyn.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:DealImageProcess.ParCalibImage.ResultHObject_L">
            <summary>
            输出数据结果列表
            </summary>
        </member>
        <member name="P:DealImageProcess.ParCalibImage.ResultHObjectForPre_L">
            <summary>
            预处理产生的结果
            </summary>
        </member>
        <member name="M:DealImageProcess.ParCalibImage.ReadXmlRoot(System.Xml.XmlElement)">
            <summary>
            加载本地文档参数时，从根节点中读取参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParCalibImage.ReadXmlChildInit(System.Xml.XmlElement)">
            <summary>
            从根节点中，初始化读取子元素
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParCalibImage.ReadXmlPar(System.Xml.XmlElement)">
            <summary>
            读取算法里面的参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="T:DealImageProcess.TypeOutCalibImage_enum">
            <summary>
            输出图像类型
            </summary>
        </member>
        <member name="T:DealImageProcess.UCCalibImage">
            <summary>
            UCCalibImage.xaml 的交互逻辑
            </summary>
            <summary>
            UCCalibImage
            </summary>
        </member>
        <member name="M:DealImageProcess.UCCalibImage.dudXPixel_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            像元尺寸
            </summary>
        </member>
        <member name="M:DealImageProcess.UCCalibImage.dudFocus_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            对焦高度
            </summary>
        </member>
        <member name="M:DealImageProcess.UCCalibImage.dudKappa_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            校准系数
            </summary>
        </member>
        <member name="M:DealImageProcess.UCCalibImage.dudXImage_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            图像尺寸
            </summary>
        </member>
        <member name="M:DealImageProcess.UCCalibImage.dudXCenter_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            中心位置
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCCalibImage.cboImageOut_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            输出图像类型
            </summary>
        </member>
        <member name="M:DealImageProcess.UCCalibImage.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.WinCalibImage">
            <summary>
            WinCalibImage.xaml 的交互逻辑
            </summary>
            <summary>
            WinCalibImage
            </summary>
        </member>
        <member name="M:DealImageProcess.WinCalibImage.RefreshOutputImageProcessInit">
            <summary>
            刷新显示结果
            </summary>
        </member>
        <member name="M:DealImageProcess.WinCalibImage.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:DealImageProcess.ParEmphasize.ResultHObject_L">
            <summary>
            输出数据结果列表
            </summary>
        </member>
        <member name="M:DealImageProcess.ParEmphasize.ReadXmlRoot(System.Xml.XmlDocument)">
            <summary>
            从本地文档中，读取参数Xml
            </summary>
            <param name="xDoc"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParEmphasize.ReadXmlRoot(System.Xml.XmlElement)">
            <summary>
            加载本地文档参数时，从根节点中读取参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParEmphasize.ReadXmlChildInit(System.Xml.XmlElement)">
            <summary>
            从根节点中，初始化读取子元素
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParEmphasize.ReadXmlPar(System.Xml.XmlElement)">
            <summary>
            读取算法参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParEmphasize.WriteXmlRoot(System.Xml.XmlElement)">
            <summary>
            将参数写入xml
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParEmphasize.WriteXmlPar(System.Xml.XmlElement)">
            <summary>
            写入算法参数参数
            </summary>
            <param name="xDoc">根节点</param>
            <returns></returns>
        </member>
        <member name="T:DealImageProcess.UCEmphasize">
            <summary>
            UCEmphasize.xaml 的交互逻辑
            </summary>
            <summary>
            UCEmphasize
            </summary>
        </member>
        <member name="M:DealImageProcess.UCEmphasize.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:DealImageProcess.ParGrayMorpho.ResultHObject_L">
            <summary>
            输出数据结果列表
            </summary>
        </member>
        <member name="M:DealImageProcess.ParGrayMorpho.ReadXmlRoot(System.Xml.XmlDocument)">
            <summary>
            从本地文档中，读取参数Xml
            </summary>
            <param name="xDoc"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParGrayMorpho.ReadXmlRoot(System.Xml.XmlElement)">
            <summary>
            加载本地文档参数时，从根节点中读取参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParGrayMorpho.ReadXmlChildInit(System.Xml.XmlElement)">
            <summary>
            从根节点中，初始化读取子元素
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParGrayMorpho.ReadXmlPar(System.Xml.XmlElement)">
            <summary>
            读取算法参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParGrayMorpho.WriteXmlRoot(System.Xml.XmlElement)">
            <summary>
            将参数写入xml
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParGrayMorpho.WriteXmlPar(System.Xml.XmlElement)">
            <summary>
            写入算法参数参数
            </summary>
            <param name="xDoc">根节点</param>
            <returns></returns>
        </member>
        <member name="T:DealImageProcess.UCGrayMorpho">
            <summary>
            UCGrayMorpho.xaml 的交互逻辑
            </summary>
            <summary>
            UCGrayMorpho
            </summary>
        </member>
        <member name="M:DealImageProcess.UCGrayMorpho.Init(Camera.BaseUCDisplayCamera,DealImageProcess.BaseParImageProcess)">
            <summary>
            初始化参数
            </summary>
            <param name="baseUCCamera"></param>
            <param name="parColorDecompose"></param>
        </member>
        <member name="M:DealImageProcess.UCGrayMorpho.tsbClose_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            闭运算
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCGrayMorpho.dudMaskWidthDilation_Close_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            腐蚀膨胀
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCGrayMorpho.tsbOpen_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            开运算
            </summary>
        </member>
        <member name="M:DealImageProcess.UCGrayMorpho.dudMaskWidthErosion_Open_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            腐蚀膨胀
            </summary>
        </member>
        <member name="M:DealImageProcess.UCGrayMorpho.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:DealImageProcess.ParMultImage.ResultHObject_L">
            <summary>
            输出数据结果列表
            </summary>
        </member>
        <member name="M:DealImageProcess.ParMultImage.ReadXmlRoot(System.Xml.XmlDocument)">
            <summary>
            从本地文档中，读取参数Xml
            </summary>
            <param name="xDoc"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParMultImage.ReadXmlRoot(System.Xml.XmlElement)">
            <summary>
            加载本地文档参数时，从根节点中读取参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParMultImage.ReadXmlChildInit(System.Xml.XmlElement)">
            <summary>
            从根节点中，初始化读取子元素
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParMultImage.ReadXmlPar(System.Xml.XmlElement)">
            <summary>
            读取算法参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParMultImage.WriteXmlRoot(System.Xml.XmlElement)">
            <summary>
            将参数写入xml
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParMultImage.WriteXmlPar(System.Xml.XmlElement)">
            <summary>
            写入算法参数参数
            </summary>
            <param name="xDoc">根节点</param>
            <returns></returns>
        </member>
        <member name="T:DealImageProcess.UCMultImage">
            <summary>
            UCMultImage.xaml 的交互逻辑
            </summary>
            <summary>
            UCMultImage
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMultImage.dudMult_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            相乘的系数
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMultImage.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:DealImageProcess.ParPreprocess.GetPropForRef(System.String)">
            <summary>
            获取相关算子的相关名称
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParPreprocess.GetMethod(System.String)">
            <summary>
            获取窗体静态创建的方法
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParPreprocess.CreatePreprocess">
            <summary>
            创建算法
            </summary>
        </member>
        <member name="P:DealImageProcess.ParPreprocess.ResultHObject_L">
            <summary>
            输出数据结果列表
            </summary>
        </member>
        <member name="M:DealImageProcess.ParPreprocess.ChangeClonePar(System.String,System.Int32)">
            <summary>
            改变拷贝后单元应有的参数
            </summary>
            <param name="nameCell">单元名称</param>
            <param name="pos">位置数</param>
        </member>
        <member name="M:DealImageProcess.ParPreprocess.ReadXmlRoot(System.Xml.XmlDocument)">
            <summary>
            从Xml文档里面读取Stream文档
            </summary>
            <param name="xDoc"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParPreprocess.WriteXmlRoot(System.Xml.XmlElement)">
            <summary>
            从Stream资源读取完整节点后，写入参数
            </summary>
        </member>
        <member name="M:DealImageProcess.ParPreprocess.WriteXmlPar(System.Xml.XmlElement)">
            <summary>
            写入算法参数参数
            </summary>
            <param name="xDoc">根节点</param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParRecord.ReadXmlRoot(System.Xml.XmlElement)">
            <summary>
            从本地文档里面读取参数的时候调用
            </summary>
            <param name="xeRoot">图像处理的根节点</param>
            <returns>是否成功读取</returns>
        </member>
        <member name="M:DealImageProcess.ParRecord.ReadXmlPar(System.Xml.XmlElement)">
            <summary>
            读取算法参数
            </summary>
            <param name="xeRoot">算法参数根节点</param>
            <returns>成功</returns>
        </member>
        <member name="M:DealImageProcess.ParRecord.WriteXmlRoot(System.Xml.XmlElement)">
            <summary>
            写入根节点参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="T:DealImageProcess.UCSetRecord">
            <summary>
            UCSetRecord.xaml 的交互逻辑
            </summary>
            <summary>
            UCSetRecord
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSetRecord.btnSetRecord_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            记录显示中间处理过程
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCSetRecord.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.WinRecord">
            <summary>
            WinSetDebugShow.xaml 的交互逻辑
            </summary>
            <summary>
            WinRecord
            </summary>
        </member>
        <member name="M:DealImageProcess.WinRecord.GetWinInst">
            <summary>
            返回窗体实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.WinRecord.tsbDisplayTestRun_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            是否显示调试画面
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.WinRecord.btnSaveClose_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            保存退出
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.WinRecord.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:DealImageProcess.ParCircle.Init_AuthorityCtr">
            <summary>
            初始化参数
            </summary>
        </member>
        <member name="P:DealImageProcess.ParCircle.ResultHObject_L">
            <summary>
            输出数据结果列表
            </summary>
        </member>
        <member name="M:DealImageProcess.ParCircle.ReadXmlRoot(System.Xml.XmlDocument)">
            <summary>
            初始化加载,基础参数为UI设置单元算法时传入
            </summary>
            <param name="xDoc">Stream文档</param>
            <returns></returns>    
        </member>
        <member name="M:DealImageProcess.ParCircle.ReadXmlRoot(System.Xml.XmlElement)">
            <summary>
            从本地文档读取参数的时候，读取
            </summary>
            <param name="xeRoot">根节点</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:DealImageProcess.ParCircle.ReadXmlPar(System.Xml.XmlElement)">
            <summary>
            读取该算法参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParCircle.WriteXmlPar(System.Xml.XmlElement)">
            <summary>
            向根节点中，写入算法参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParROI.Add_MCircle(System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            MCircleROI参数
            </summary>
            <param name="xStart"></param>
            <param name="yStart"></param>
            <param name="xEnd"></param>
            <param name="yEnd"></param>
            <param name="radius"></param>
            <param name="angle"></param>
        </member>
        <member name="M:DealImageProcess.ParROI.Init_AuthorityCtr">
            <summary>
            初始化参数
            </summary>
        </member>
        <member name="P:DealImageProcess.ParROI.Item(System.Int32,System.Int32)">
            <summary>
            索引点位
            </summary>
            <param name="index"></param>
            <param name="indexP"></param>
            <returns></returns>
        </member>
        <member name="F:DealImageProcess.ParROI.typeROI_e">
            <summary>
            ROI 类型
            </summary>
        </member>
        <member name="P:DealImageProcess.ParROI.NumPoint">
            <summary>
            当前类型的点数
            </summary>
        </member>
        <member name="F:DealImageProcess.ParROI.colorROI">
            <summary>
            ROI线的颜色
            </summary>
        </member>
        <member name="F:DealImageProcess.ParROI.colorROIPoint">
            <summary>
            ROI点的颜色
            </summary>
        </member>
        <member name="F:DealImageProcess.ParROI.colorROILine">
            <summary>
            ROI线的颜色
            </summary>
        </member>
        <member name="F:DealImageProcess.ParROI.typeFill">
            <summary>
            ROI的填充类型
            </summary>
            <summary>
            填充颜色
            </summary>
        </member>
        <member name="M:DealImageProcess.ParROI.Add(System.Int32)">
            <summary>
            增加到指定的位置
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParROI.Add">
            <summary>
            增加默认ROI
            </summary>
        </member>
        <member name="M:DealImageProcess.ParROI.Add(DealImageProcess.TypeROI_enum)">
            <summary>
            增加指定类型的ROI
            </summary>
        </member>
        <member name="M:DealImageProcess.ParROI.Add(DealImageProcess.TypeROI_enum,System.Double[])">
            <summary>
            增加指定的类型和值
            </summary>
        </member>
        <member name="M:DealImageProcess.ParROI.Add(DealImageProcess.TypeROI_enum,System.Double[],System.Int32)">
            <summary>
            将ROI添加到指定的所以位置
            </summary>
        </member>
        <member name="M:DealImageProcess.ParROI.InitRegionReference">
            <summary>
            初始化算法区域关联单元
            </summary>
        </member>
        <member name="M:DealImageProcess.ParROI.Del(System.Int32)">
            <summary>
            删除ROI
            </summary>
        </member>
        <member name="M:DealImageProcess.ParROI.ResetROI(DealImageProcess.TypeROI_enum,System.String,System.String,System.Int32)">
            <summary>
            设置全新的ROI
            </summary>
            <param name="typeROI_e"></param>
            <param name="line"></param>
            <param name="point"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParROI.ResetROICoord(DealImageProcess.TypeROI_enum,System.Int32)">
            <summary>
            仅仅复位ROI坐标
            </summary>
            <param name="typeROI_e"></param>
            <param name="line"></param>
            <param name="point"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParROI.ReadXmlRoot(System.Xml.XmlElement)">
            <summary>
            读取ROI的所有参数
            </summary>
        </member>
        <member name="M:DealImageProcess.ParROI.ReadXmlPoints(System.Xml.XmlElement,DealImageProcess.ParROI)">
            <summary>
            读取ROI每个点的信息
            </summary>
        </member>
        <member name="M:DealImageProcess.ParROI.ReadRegionReference(System.Xml.XmlElement)">
            <summary>
            读取算法单元区域关联
            </summary>
        </member>
        <member name="M:DealImageProcess.ParROI.WriteXmlRoot(System.Xml.XmlElement)">
            <summary>
            将所有ROI参数写入根节点
            </summary>
        </member>
        <member name="M:DealImageProcess.ParROI.WriteXmlPoints(DealImageProcess.ParROI,System.Xml.XmlElement)">
            <summary>
            将单个ROI参数写入根节点，
            </summary>
        </member>
        <member name="M:DealImageProcess.ParROI.WriteRegionReference(System.Xml.XmlElement)">
            <summary>
            写入算法区域关联
            </summary>
        </member>
        <member name="M:DealImageProcess.ParROI.Add_Polygon(System.Double[])">
            <summary>
            多边形参数
            </summary>
        </member>
        <member name="T:DealImageProcess.UCMoveROI">
            <summary>
            UCMoveROI.xaml 的交互逻辑
            </summary>
            <summary>
            UCMoveROI
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMoveROI.lblMoveLeft_MouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
             <summary>
            点击后，开始循环线程,向左平移
             </summary>
             <param name="sender"></param>
             <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCMoveROI.lblMoveRight_MouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            向右平移
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCMoveROI.dudMoveX_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            X方向平移数值
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMoveROI.lblMoveDown_MouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Y方向平移
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMoveROI.tsbMoveAllROI_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            选择所有的ROI
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMoveROI.lblMoveLeft_LostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            失去焦点
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMoveROI.ReDrawMove">
            <summary>
            重绘，和数据重新显示
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMoveROI.lblAntiClockwise_MouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            逆时针
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCMoveROI.lblClockwise_MouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            顺时针
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCMoveROI.dudMoveY_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            R方向
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMoveROI.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.UCSimpleROI">
            <summary>
            UCSimpleROI.xaml 的交互逻辑
            </summary>
            <summary>
            UCSimpleROI
            </summary>
        </member>
        <member name="F:DealImageProcess.UCSimpleROI.indexColorROIPoint">
            <summary>
            ROI点颜色
            </summary>
        </member>
        <member name="F:DealImageProcess.UCSimpleROI.indexColorROILine">
            <summary>
            ROI线颜色
            </summary>
        </member>
        <member name="F:DealImageProcess.UCSimpleROI.indexColorROIShow">
            <summary>
            ROI显示颜色
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSimpleROI.CheckROIValue">
            <summary>
            校验ROI设置是否正确
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSimpleROI.g_DrawDisplay_IndexShape(System.Int32,System.Int32,System.String)">
            <summary>
            绘制形状的索引
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:DealImageProcess.UCSimpleROI.btnDrawROI_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            回去绘制后ROI的坐标
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSimpleROI.ChangeROIPoint">
            <summary>
            修改ROI点位
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSimpleROI.btnResetROI_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            绘制新的ROI区域
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSimpleROI.btnAdd_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            增加
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSimpleROI.btnDel_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            删除
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSimpleROI.InitSelectIndex">
            <summary>
            初始化化时，默认选择第一行显示
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSimpleROI.dgROI_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            根据选择的不同行，使对应ROI可以编辑
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCSimpleROI.btnEnableChange_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            使能当前ROI为可编辑
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSimpleROI.SelectDrawROI">
            <summary>
            执行选择ROI
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSimpleROI.ReDrawAllROI">
            <summary>
            绘制所有的ROI
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSimpleROI.ReDrawROIDelay">
            <summary>
            延迟重新绘制
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSimpleROI.ReDrawROI">
            <summary>
            重新显示可绘制的ROI区域,默认点的索引号为0
            </summary>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.UCSimpleROI.ReDrawROI(System.Int32)">
            <summary>
            使当前区域变成可编辑,并传入点的序号
            </summary>
            <param name="index"></param>
        </member>
        <!-- 对于成员“M:DealImageProcess.UCSimpleROI.ConvertROI(System.Double[])”忽略有格式错误的 XML 注释 -->
        <member name="M:DealImageProcess.UCSimpleROI.cboColorLineROI_ColorChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.String})">
            <summary>
            修改ROI线颜色
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSimpleROI.dudWidthLineROI_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            设置ROI线宽度
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSimpleROI.CopyNewROI">
            <summary>
            增加最后一个ROI
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSimpleROI.LogoutEvent">
            <summary>
             事件注册
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSimpleROI.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.WinMannualROI">
            <summary>
            WinMannualROI.xaml 的交互逻辑
            </summary>
            <summary>
            WinMannualROI
            </summary>
        </member>
        <member name="M:DealImageProcess.WinMannualROI.GetWinInst">
            <summary>
            返回窗体实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.WinMannualROI.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:DealImageProcess.ParSaveImage.ReadXmlRoot(System.Xml.XmlDocument)">
            <summary>
            初始化加载,基础参数为UI设置单元算法时传入
            </summary>
            <param name="xDoc">Stream文档</param>
            <returns></returns>  
        </member>
        <member name="M:DealImageProcess.ParSaveImage.ReadXmlRoot(System.Xml.XmlElement)">
            <summary>
            从本地文档读取参数的时候，读取
            </summary>
            <param name="xeRoot">根节点</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:DealImageProcess.ParSaveImage.ReadXmlPar(System.Xml.XmlElement)">
            <summary>
            读取算法参数
            </summary>
            <param name="xeRoot">算法参数根节点</param>
            <returns>成功</returns>
        </member>
        <member name="M:DealImageProcess.ParSaveImage.WriteXmlRoot(System.Xml.XmlDocument)">
            <summary>
            从Stream资源读取完整节点后，写入参数
            </summary>
        </member>
        <member name="M:DealImageProcess.ParSaveImage.WriteXmlRoot(System.Xml.XmlElement)">
            <summary>
            从Stream资源读取完整节点后，写入参数
            </summary>
        </member>
        <member name="M:DealImageProcess.ParSaveImage.WriteXmlPar(System.Xml.XmlElement)">
            <summary>
            该算法参数
            </summary>
        </member>
        <member name="T:DealImageProcess.WinSaveImage">
            <summary>
            WinSaveImage.xaml 的交互逻辑
            </summary>
            <summary>
            WinSaveImage
            </summary>
        </member>
        <member name="M:DealImageProcess.WinSaveImage.tsbSaveOK_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            保存OK图像
            </summary>
        </member>
        <member name="M:DealImageProcess.WinSaveImage.tsbSaveNG_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            保存NG图像
            </summary>
        </member>
        <member name="M:DealImageProcess.WinSaveImage.tsbSaveAll_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            保存所有图像
            </summary>
        </member>
        <member name="M:DealImageProcess.WinSaveImage.tsbSavebyPos_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            按照拍照位置保存
            </summary>
        </member>
        <member name="M:DealImageProcess.WinSaveImage.tsbSingleCalib_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            是否位全局参数
            </summary>
        </member>
        <member name="M:DealImageProcess.WinSaveImage.tsbShortName_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            图片短时间模式
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.WinSaveImage.btnSave_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            保存参数到本地
            </summary>
        </member>
        <member name="M:DealImageProcess.WinSaveImage.btnClose_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            退出窗体,恢复备份参数
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.WinSaveImage.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.BaseUCBasicSetting">
            <summary>
            BaseUCBasicSetting.xaml 的交互逻辑
            </summary>
            <summary>
            BaseUCBasicSetting
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseUCBasicSetting.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:DealImageProcess.BaseUCImageProcess.Camera_L">
            <summary>
            相机Combox
            </summary>
        </member>
        <member name="T:DealImageProcess.UCSetOthers">
            <summary>
            UCSetOthers.xaml 的交互逻辑
            </summary>
            <summary>
            UCSetOthers
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSetOthers.Close">
            <summary>
            退出
            </summary>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.UCSetOthers.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:DealImageProcess.ParGrayAnalyze.Init_AuthorityCtr">
            <summary>
            初始化参数
            </summary>
        </member>
        <member name="P:DealImageProcess.ParGrayAnalyze.ResultHObject_L">
            <summary>
            输出数据结果列表
            </summary>
        </member>
        <member name="M:DealImageProcess.ParGrayAnalyze.ReadXmlRoot(System.Xml.XmlDocument)">
            <summary>
            初始化加载
            </summary>
            <param name="xDoc">Stream文档</param>
            <returns></returns>  
        </member>
        <member name="M:DealImageProcess.ParGrayAnalyze.ReadXmlRoot(System.Xml.XmlElement)">
            <summary>
            从本地文档读取参数的时候，读取
            </summary>
            <param name="xeRoot">根节点</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:DealImageProcess.ParGrayAnalyze.ReadXmlPar(System.Xml.XmlElement)">
            <summary>
            读取该算法的参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParGrayAnalyze.WriteXmlRoot(System.Xml.XmlDocument)">
            <summary>
            从Stream资源读取完整节点后，写入参数
            </summary>
            <param name="xDoc"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParGrayAnalyze.WriteXmlRoot(System.Xml.XmlElement)">
            <summary>
            从Stream资源读取完整节点后，写入参数
            </summary>
            <param name="xDoc"></param>
            <returns></returns>
        </member>
        <member name="T:DealImageProcess.UCGrayAnalyze">
            <summary>
            UCGrayAnalyze.xaml 的交互逻辑
            </summary>
            <summary>
            UCGrayAnalyze
            </summary>
        </member>
        <member name="M:DealImageProcess.UCGrayAnalyze.Init(DealImageProcess.ParGrayAnalyze,System.Collections.Generic.List{BasicComprehensive.CellHObjectReference})">
            <summary>
            参数初始化
            </summary>
            <param name="parScaledShape"></param>
        </member>
        <member name="M:DealImageProcess.UCGrayAnalyze.dudFilter_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            剔除比例
            </summary>
        </member>
        <member name="M:DealImageProcess.UCGrayAnalyze.dudMinGray_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            灰度筛选区域最小灰度值
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCGrayAnalyze.cboSelectGray_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            筛选特征
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCGrayAnalyze.cobOperation_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            操作方式
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCGrayAnalyze.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.WinGrayAnalyze">
            <summary>
            WinGrayAnalyze.xaml 的交互逻辑
            </summary>
            <summary>
            WinGrayAnalyze
            </summary>
        </member>
        <member name="M:DealImageProcess.WinGrayAnalyze.LoginEvent">
            <summary>
            事件注册
            </summary>
        </member>
        <member name="M:DealImageProcess.WinGrayAnalyze.btnSaveOnly_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            仅仅保存
            </summary>
        </member>
        <member name="M:DealImageProcess.WinGrayAnalyze.btnSave_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            保存并且退出
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.WinGrayAnalyze.RefreshOutputImageProcessInit">
            <summary>
            刷新显示结果
            </summary>
        </member>
        <member name="M:DealImageProcess.WinGrayAnalyze.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseParMatch.Init_AuthorityCtr">
            <summary>
            初始化参数
            </summary>
        </member>
        <member name="M:DealImageProcess.ParNcc.Init_AuthorityCtr">
            <summary>
            初始化参数
            </summary>
        </member>
        <member name="P:DealImageProcess.ParNcc.ResultHObject_L">
            <summary>
            输出数据结果列表
            </summary>
        </member>
        <member name="M:DealImageProcess.ParNcc.ReadXmlRoot(System.Xml.XmlDocument)">
            <summary>
            初始化加载
            </summary>
        </member>
        <member name="M:DealImageProcess.ParNcc.ReadXmlRoot(System.Xml.XmlElement)">
            <summary>
            从本地文档读取参数的时候，读取
            </summary>
            <param name="xeRoot">根节点</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:DealImageProcess.ParNcc.ReadXmlPar(System.Xml.XmlElement)">
            <summary>
            读取该算法的参数
            </summary>
        </member>
        <member name="M:DealImageProcess.ParNcc.WriteXmlRoot(System.Xml.XmlElement)">
            <summary>
            写入参数
            </summary>
        </member>
        <member name="T:DealImageProcess.UCNcc">
            <summary>
            UCSetNcc.xaml 的交互逻辑
            </summary>
            <summary>
            UCNcc
            </summary>
        </member>
        <member name="M:DealImageProcess.UCNcc.Init(DealImageProcess.ParNcc,System.Collections.Generic.List{System.String},System.Collections.Generic.List{BasicComprehensive.CellReference},System.Collections.Generic.List{BasicComprehensive.CellHObjectReference})">
            <summary>
            参数初始化
            </summary>
            <param name="parScaledShape"></param>
            <param name="cellTemp_L">模板单元</param>
        </member>
        <member name="M:DealImageProcess.UCNcc.dudXMin_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            X范围
            </summary>
        </member>
        <member name="M:DealImageProcess.UCNcc.dudAngleStart_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            角度范围
            </summary>
        </member>
        <member name="M:DealImageProcess.UCNcc.dudMinScore_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            最小匹配度
            </summary>
        </member>
        <member name="M:DealImageProcess.UCNcc.dudNumMatches_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            匹配数
            </summary>
        </member>
        <member name="M:DealImageProcess.UCNcc.dudMaxOverlap_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            最大交叠
            </summary>
        </member>
        <member name="M:DealImageProcess.UCNcc.dudNumLevels_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            金字塔级数
            </summary>
        </member>
        <member name="M:DealImageProcess.UCNcc.cboSubPixel_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            亚像素
            </summary>
        </member>
        <member name="M:DealImageProcess.UCNcc.cboModelID_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            模板ID
            </summary>
        </member>
        <member name="M:DealImageProcess.UCNcc.cboSort_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            坐标排序
            </summary>
        </member>
        <member name="M:DealImageProcess.UCNcc.ShowCellTemp">
            <summary>
            显示模板单元
            </summary>
        </member>
        <member name="M:DealImageProcess.UCNcc.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.WinNcc">
            <summary>
            NccWindow.xaml 的交互逻辑
            </summary>
            <summary>
            WinNcc
            </summary>
        </member>
        <member name="M:DealImageProcess.WinNcc.LoginEvent">
            <summary>
            事件注册
            </summary>
        </member>
        <member name="M:DealImageProcess.WinNcc.btnSaveOnly_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            仅仅保存
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.WinNcc.btnSave_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            保存并且退出
            </summary>
        </member>
        <member name="M:DealImageProcess.WinNcc.RefreshOutputImageProcessInit">
            <summary>
            刷新显示结果
            </summary>
        </member>
        <member name="M:DealImageProcess.WinNcc.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:DealImageProcess.ParScaledShape.Init_AuthorityCtr">
            <summary>
            初始化参数
            </summary>
        </member>
        <member name="P:DealImageProcess.ParScaledShape.ResultHObject_L">
            <summary>
            输出数据结果列表
            </summary>
        </member>
        <member name="M:DealImageProcess.ParScaledShape.ReadXmlRoot(System.Xml.XmlDocument)">
            <summary>
            初始化加载,基础参数为UI设置单元算法时传入
            </summary>
            <param name="xDoc">Stream文档</param>
            <returns></returns>  
        </member>
        <member name="M:DealImageProcess.ParScaledShape.ReadXmlRoot(System.Xml.XmlElement)">
            <summary>
            从本地文档读取参数的时候，读取
            </summary>
            <param name="xeRoot">根节点</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:DealImageProcess.ParScaledShape.ReadXmlPar(System.Xml.XmlElement)">
            <summary>
            读取算法参数
            </summary>
            <param name="xeRoot">算法参数根节点</param>
            <returns>成功</returns>
        </member>
        <member name="M:DealImageProcess.ParScaledShape.WriteXmlRoot(System.Xml.XmlElement)">
            <summary>
            从Stream资源读取完整节点后，写入参数
            </summary>
        </member>
        <member name="M:DealImageProcess.ParScaledShape.WriteXmlPar(System.Xml.XmlElement)">
            <summary>
            该算法参数
            </summary>
        </member>
        <member name="T:DealImageProcess.UCScaledShape">
            <summary>
            DealScaledShape.xaml 的交互逻辑
            </summary>
            <summary>
            UCScaledShape
            </summary>
        </member>
        <member name="M:DealImageProcess.UCScaledShape.Init(DealImageProcess.ParScaledShape,System.Collections.Generic.List{System.String},System.Collections.Generic.List{BasicComprehensive.CellReference},System.Collections.Generic.List{BasicComprehensive.CellHObjectReference})">
            <summary>
            参数初始化
            </summary>
            <param name="parScaledShape"></param>
            <param name="cellTemp_L">模板单元</param>
        </member>
        <member name="M:DealImageProcess.UCScaledShape.dudXMin_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            X范围
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCScaledShape.dudAngleStart_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            角度范围
            </summary>
        </member>
        <member name="M:DealImageProcess.UCScaledShape.dudScaleMin_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            缩放范围
            </summary>
        </member>
        <member name="M:DealImageProcess.UCScaledShape.dudMinScore_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            最小分数
            </summary>
        </member>
        <member name="M:DealImageProcess.UCScaledShape.dudNumMatches_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            匹配数
            </summary>
        </member>
        <member name="M:DealImageProcess.UCScaledShape.dudMaxOverlap_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            最大交叠
            </summary>
        </member>
        <member name="M:DealImageProcess.UCScaledShape.dudNumLevels_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            金字塔级数
            </summary>
        </member>
        <member name="M:DealImageProcess.UCScaledShape.dudGreediness_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            贪心算法
            </summary>
        </member>
        <member name="M:DealImageProcess.UCScaledShape.cboSubPixel_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            亚像素
            </summary>
        </member>
        <member name="M:DealImageProcess.UCScaledShape.cboDeformation_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            最大可变形
            </summary>
        </member>
        <member name="M:DealImageProcess.UCScaledShape.cboModelID_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            关联模板单元
            </summary>
        </member>
        <member name="M:DealImageProcess.UCScaledShape.cboSort_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            坐标排序
            </summary>
        </member>
        <member name="M:DealImageProcess.UCScaledShape.dudThRowColumn_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            行列阈值
            </summary>
        </member>
        <member name="M:DealImageProcess.UCScaledShape.cboGrayJudge_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            灰度值辅助判断
            </summary>
        </member>
        <member name="M:DealImageProcess.UCScaledShape.dudMinGray_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            灰度值范围
            </summary>
        </member>
        <member name="M:DealImageProcess.UCScaledShape.ShowCellTemp">
            <summary>
            显示模板单元
            </summary>
        </member>
        <member name="M:DealImageProcess.UCScaledShape.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.WinScaledShape">
            <summary>
            DealScaledShapeWindow.xaml 的交互逻辑
            </summary>
            <summary>
            WinScaledShape
            </summary>
        </member>
        <member name="M:DealImageProcess.WinScaledShape.LoginEvent">
            <summary>
            事件注册
            </summary>
        </member>
        <member name="M:DealImageProcess.WinScaledShape.btnSave_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            保存参数到本地并且退出
            </summary>
        </member>
        <member name="M:DealImageProcess.WinScaledShape.RefreshOutputImageProcessInit">
            <summary>
            刷新显示结果
            </summary>
        </member>
        <member name="M:DealImageProcess.WinScaledShape.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:DealImageProcess.BaseParTemplate.PathSingleTemplate">
            <summary>
            单一模板路径
            </summary>
        </member>
        <member name="P:DealImageProcess.BaseParTemplate.PathCellTemplate">
            <summary>
            和不同配置绑定
            </summary>
        </member>
        <member name="P:DealImageProcess.BaseParTemplate.PathImageInit">
            <summary>
            用来制作模板的原始图像的路径
            </summary>
        </member>
        <member name="F:DealImageProcess.BaseParTemplate.colorXld">
            <summary>
            //ROI显示的颜色 
            </summary>
        </member>
        <member name="P:DealImageProcess.BaseParTemplate.ResultHObject_L">
            <summary>
            输出数据结果列表
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseParTemplate.ReadXmlChildInit(System.Xml.XmlElement)">
            <summary>
            初始化读取参数，和ReadXmlChild方法相比，只是不读取基础属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.BaseParTemplate.ReadXmlChild(System.Xml.XmlElement)">
            <summary>
            读取子元素的参数,需从写基类方法，
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseParTemplate.ReadXmlMakeTemp(System.Xml.XmlElement)">
            <summary>
            读取制作模板参数
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseParTemplate.WriteXmlMakeTemp(System.Xml.XmlElement)">
            <summary>
            写入制作模板参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.BaseParTemplate.WriteXmlChild(System.Xml.XmlElement)">
            <summary>
            写入子节点
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseFunTemplate.QiGuai">
            <summary>
            处理Halcon的异常bug
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseFunTemplate.MakeTemp(BasicClass.ImageAll,DealImageProcess.BaseParTemplate,HalconDotNet.HObject@,DealResult.ResultTemplate@)">
            <summary>
            采用算法，求取包络
            </summary>
            <param name="imageAll"></param>
            <param name="parROI"></param>
            <param name="par"></param>
            <param name="ho_TempImage"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.BaseFunTemplate.SaveMaskImage(DealImageProcess.BaseParTemplate,DealResult.ResultTemplate,System.Collections.Generic.List{DealImageProcess.ImageResult})">
            <summary>
            保存掩膜图片
            </summary>
            <param name="result"></param>
            <param name="ho_UnionMask"></param>
        </member>
        <member name="T:DealImageProcess.UCDisplayTemp">
            <summary>
            UCDisplayTemp.xaml 的交互逻辑
            </summary>
            <summary>
            UCDisplayTemp
            </summary>
        </member>
        <member name="M:DealImageProcess.UCDisplayTemp.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.UCParMakeTemp">
            <summary>
            UCParMakeTemp.xaml 的交互逻辑
            </summary>
            <summary>
            UCParMakeTemp
            </summary>
        </member>
        <member name="M:DealImageProcess.UCParMakeTemp.dudMargin_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            模板边界间距
            </summary>
        </member>
        <member name="M:DealImageProcess.UCParMakeTemp.cboOutTypeImage_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            模板图像输出类型
            </summary>
        </member>
        <member name="M:DealImageProcess.UCParMakeTemp.tsbUseAlgorithm_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            是否使用算法求包络
            </summary>
        </member>
        <member name="M:DealImageProcess.UCParMakeTemp.tsbImageROITemp_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            模板图片和区域分开
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCParMakeTemp.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.UCMakeTemp">
            <summary>
            SetTemplate.xaml 的交互逻辑
            </summary>
            <summary>
            UCMakeTemp
            </summary>
        </member>
        <member name="P:DealImageProcess.UCMakeTemp.PathComprehensive">
            <summary>
            根路径,按照型号名为根目录
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMakeTemp.InitTypeTempClass">
             <summary>
            根据算法类型，将父类指向对应类型的子类
             </summary>
        </member>
        <member name="M:DealImageProcess.UCMakeTemp.InitCtrHalTemp">
            <summary>
            初始化控件
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMakeTemp.tsbShowXld_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            是否显示模板轮廓
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMakeTemp.cboColorXld_ColorChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.String})">
            <summary>
            颜色
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMakeTemp.tsbCenter_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            手动中心
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMakeTemp.rdbSingle_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            使用全局模板
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCMakeTemp.rdbCellImage_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            采用默认路径
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCMakeTemp.rdbLocalImage_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            使用本地图像
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCMakeTemp.btnCreateTemp_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            创建模板ID
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMakeTemp.btnAutoSaveStd_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            生成模板并保存基准值
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMakeTemp.btnLoadInitImage_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            加载上一次制作目标时的图片
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMakeTemp.btnSetMask_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            打开掩膜窗体
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMakeTemp.UCMakeTemp_Close_event">
            <summary>
            退出绘制掩膜,重新生成ID
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMakeTemp.ShowTemplate_Task">
            <summary>
            加载模板显示窗体，并且显示模板图片
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMakeTemp.ShowModelROIXld">
            <summary>
            显示模板轮廓
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMakeTemp.ShowRegionProfile">
            <summary>
            显示轮廓区域被
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMakeTemp.DisplayCenter">
            <summary>
            显示手动中心
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMakeTemp.ShowCenterTemp">
            <summary>
            显示模板的中心坐标
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMakeTemp.ClearTempWin">
             <summary>
            清除窗体图片
             </summary>
        </member>
        <member name="M:DealImageProcess.UCMakeTemp.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:DealImageProcess.ParTempNcc.ReadXmlRoot(System.Xml.XmlElement)">
            <summary>
            从本地文档读取参数的时候，读取
            </summary>
            <param name="xeRoot">根节点</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:DealImageProcess.ParTempNcc.ReadXmlPar(System.Xml.XmlElement)">
            <summary>
            读取该算法参数
            </summary>
        </member>
        <member name="M:DealImageProcess.ParTempNcc.WriteXmlPar(System.Xml.XmlElement)">
            <summary>
            算法参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="T:DealImageProcess.TempNcc">
            <summary>
            CreatNcc.xaml 的交互逻辑
            </summary>
            <summary>
            TempNcc
            </summary>
        </member>
        <member name="M:DealImageProcess.TempNcc.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.WinTempNcc">
            <summary>
            WinTempNcc.xaml 的交互逻辑
            </summary>
            <summary>
            WinTempNcc
            </summary>
        </member>
        <member name="M:DealImageProcess.WinTempNcc.uCMakeTemp_ModelID_event(System.String,DealResult.ResultTemplate)">
            <summary>
            响应制作模板控件输出的模板ID，并输出给DealComprehensive类
            </summary>
            <param name="iD"></param>
        </member>
        <member name="M:DealImageProcess.WinTempNcc.uCMakeTemp_SaveROI_event">
            <summary>
            触发保存更改的ROI坐标
            </summary>
        </member>
        <member name="M:DealImageProcess.WinTempNcc.btnSaveOnly_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            仅仅保存
            </summary>
        </member>
        <member name="M:DealImageProcess.WinTempNcc.btnSave_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            保存并且退出
            </summary>
        </member>
        <member name="M:DealImageProcess.WinTempNcc.ClearTempWin">
            <summary>
            清除模板的窗体
            </summary>
        </member>
        <member name="M:DealImageProcess.WinTempNcc.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:DealImageProcess.FunTempScaledShape.CreateTemp(DealImageProcess.BaseParTemplate)">
            <summary>
            创建模板ID
            </summary>
            <param name="baseParTemplate"></param>
            <param name="pathTemp"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParTempScaledShape.ReadXmlRoot(System.Xml.XmlElement)">
            <summary>
            从本地文档读取参数的时候，读取
            </summary>
            <param name="xeRoot">根节点</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:DealImageProcess.ParTempScaledShape.ReadXmlPar(System.Xml.XmlElement)">
            <summary>
            读取算法参数
            </summary>
            <param name="xeRoot">算法参数根节点</param>
            <returns>成功</returns>
        </member>
        <member name="M:DealImageProcess.ParTempScaledShape.WriteXmlPar(System.Xml.XmlElement)">
            <summary>
            算法参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="T:DealImageProcess.TempScaledShape">
            <summary>
            CreatScaledShape.xaml 的交互逻辑
            </summary>
            <summary>
            TempScaledShape
            </summary>
        </member>
        <member name="M:DealImageProcess.TempScaledShape.cboTypeCenter_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            中心点类型
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.TempScaledShape.dudSigma_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            轮廓平滑
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.TempScaledShape.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.WinTempScaledShape">
            <summary>
            WinScaledShape.xaml 的交互逻辑
            </summary>
            <summary>
            WinTempScaledShape
            </summary>
        </member>
        <member name="M:DealImageProcess.WinTempScaledShape.GetWinInst">
            <summary>
            返回窗体实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.WinTempScaledShape.uCMakeTemp_ModelID_event(System.String,DealResult.ResultTemplate)">
            <summary>
            响应制作模板控件输出的模板ID，并输出给DealComprehensive类
            </summary>
        </member>
        <member name="M:DealImageProcess.WinTempScaledShape.uCMakeTemp_SaveROI_event">
            <summary>
            触发保存更改的ROI坐标
            </summary>
        </member>
        <member name="M:DealImageProcess.WinTempScaledShape.btnSaveOnly_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            保存参数
            </summary>
        </member>
        <member name="M:DealImageProcess.WinTempScaledShape.btnSave_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            保存并且退出
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.WinTempScaledShape.ClearTempWin">
            <summary>
            清除模板的窗体
            </summary>
        </member>
        <member name="M:DealImageProcess.WinTempScaledShape.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:DealImageProcess.FunMeasureSLine.AddDisplay(DealInOutput.ParOutput,DealResult.BaseResult)">
            <summary>
            添加显示
            </summary>
            <param name="par"></param>
            <param name="baseResult"></param>
        </member>
        <member name="P:DealImageProcess.ParMeasureSLine.ResultHObject_L">
            <summary>
            输出数据结果列表
            </summary>
        </member>
        <member name="M:DealImageProcess.ParMeasureSLine.Init(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            插入算法单元的时候，输入相关的插入参数
            </summary>      
        </member>
        <member name="M:DealImageProcess.ParMeasureSLine.ReadXmlRoot(System.Xml.XmlDocument)">
            <summary>
            初始化加载,基础参数为UI设置单元算法时传入
            </summary>
            <param name="xDoc">Stream文档</param>
            <returns></returns>  
        </member>
        <member name="M:DealImageProcess.ParMeasureSLine.ReadXmlRoot(System.Xml.XmlElement)">
            <summary>
            从本地文档读取参数的时候，读取
            </summary>
            <param name="xeRoot">根节点</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:DealImageProcess.ParMeasureSLine.ReadXmlPar(System.Xml.XmlElement)">
            <summary>
            读取算法参数
            </summary>
            <param name="xeRoot">算法参数根节点</param>
            <returns>成功</returns>
        </member>
        <member name="M:DealImageProcess.ParMeasureSLine.WriteXmlRoot(System.Xml.XmlDocument)">
            <summary>
            从Stream资源读取完整节点后，写入参数
            </summary>
            <param name="xDoc"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParMeasureSLine.WriteXmlRoot(System.Xml.XmlElement)">
            <summary>
            从Stream资源读取完整节点后，写入参数
            </summary>
            <param name="xDoc"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParMeasureSLine.WriteXmlPar(System.Xml.XmlElement)">
            <summary>
            该算法参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="T:DealImageProcess.Interpolation_enum">
            <summary>
            插值方法
            </summary>
        </member>
        <member name="T:DealImageProcess.Transition_enum">
            <summary>
            边缘过渡选择
            </summary>
        </member>
        <member name="T:DealImageProcess.Select_enum">
            <summary>
            边缘选择
            </summary>
        </member>
        <member name="T:DealImageProcess.UCMeasureSLine">
            <summary>
            UCMeasureSLine.xaml 的交互逻辑
            </summary>
            <summary>
            UCMeasureSLine
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMeasureSLine.Init(DealImageProcess.ParMeasureSLine,System.Collections.Generic.List{BasicComprehensive.CellReference},System.Collections.Generic.List{BasicComprehensive.CellHObjectReference})">
            <summary>
            参数初始化
            </summary>
            <param name="parScaledShape"></param>
            <param name="cellTemp_L">模板单元</param>
        </member>
        <member name="M:DealImageProcess.UCMeasureSLine.dudMinRange_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            最小边缘幅度
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMeasureSLine.dudSigma_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            sigma
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMeasureSLine.cboInterpolation_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            插值方法
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMeasureSLine.cboTransition_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            边缘过渡
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMeasureSLine.cboSelect_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            边缘位置
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMeasureSLine.chkPrecise_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            最高精度
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMeasureSLine.dudAdjustDis_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            补偿值
            </summary>
        </member>
        <member name="M:DealImageProcess.UCMeasureSLine.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.WinMeasureSLine">
            <summary>
            WinMeasureSLine.xaml 的交互逻辑
            </summary>
            <summary>
            WinMeasureSLine
            </summary>
        </member>
        <member name="M:DealImageProcess.WinMeasureSLine.LoginEvent">
            <summary>
            事件注册
            </summary>
        </member>
        <member name="M:DealImageProcess.WinMeasureSLine.RefreshOutputImageProcessInit">
            <summary>
            刷新显示结果
            </summary>
        </member>
        <member name="M:DealImageProcess.WinMeasureSLine.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.Others">
            <summary>
            OtherScaledShape.xaml 的交互逻辑
            </summary>
            <summary>
            Others
            </summary>
        </member>
        <member name="M:DealImageProcess.Others.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <!-- 对于成员“M:DealImageProcess.FunBinary.DealBinary(DealImageProcess.ParBinary,HalconDotNet.HObject,BasicClass.ImageAll)”忽略有格式错误的 XML 注释 -->
        <member name="T:DealImageProcess.UCBinaryThresh">
            <summary>
            Binary.xaml 的交互逻辑
            </summary>
            <summary>
            UCBinaryThresh
            </summary>
        </member>
        <member name="M:DealImageProcess.UCBinaryThresh.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.WinBinary">
            <summary>
            WinBinary.xaml 的交互逻辑
            </summary>
            <summary>
            WinBinary
            </summary>
        </member>
        <member name="M:DealImageProcess.WinBinary.LoginEvent">
            <summary>
            事件注册
            </summary>
        </member>
        <member name="M:DealImageProcess.WinBinary.btnSave_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            保存参数到本地并且退出
            </summary>
        </member>
        <member name="M:DealImageProcess.WinBinary.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:DealImageProcess.BaseParColorDecompose.ReadXmlInit(System.Xml.XmlElement)">
            <summary>
            从根节点中，初始化读取子元素
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.BaseParColorDecompose.ReadXmlChild(System.Xml.XmlElement)">
            <summary>
            读取参数Xml  
            </summary>
            <param name="xeRoot">根节点</param>
            <returns>是否读取成功</returns>      
        </member>
        <member name="M:DealImageProcess.BaseParColorDecompose.WriteXmlRoot(System.Xml.XmlElement)">
            <summary>
            向根节点中写入参数
            </summary>
            <param name="xeRoot">根节点</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:DealImageProcess.FunColorDecompose.DealColorDecompose(DealImageProcess.ParColorDecompose,BasicClass.ImageAll)">
            <summary>
            彩色图像分解
            </summary>
            <param name="hashImage"></param>
            <param name="ho_ROI"></param>
            <param name="par"></param>
            <param name="result"></param>
            <returns></returns>      
        </member>
        <member name="M:DealImageProcess.FunColorDecompose.RGBDecompse(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,DealImageProcess.BaseParColorDecompose)">
            <summary>
            将RGB按照设定的阈值进行提取
            </summary>
            <param name="ho_ImageR"></param>
            <param name="ho_ImageG"></param>
            <param name="ho_ImageB"></param>
            <param name="baseParColorDecompose"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.FunColorDecompose.HSVDecompse(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,DealImageProcess.BaseParColorDecompose)">
            <summary>
            将HSV按照设定的阈值进行提取
            </summary>
            <param name="ho_ImageH"></param>
            <param name="ho_ImageS"></param>
            <param name="ho_ImageV"></param>
            <param name="baseParColorDecompose"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParColorDecompose.Init_AuthorityCtr">
            <summary>
            初始化参数
            </summary>
        </member>
        <member name="P:DealImageProcess.ParColorDecompose.ResultHObject_L">
            <summary>
            输出数据结果列表
            </summary>
        </member>
        <member name="P:DealImageProcess.ParColorDecompose.ResultHObjectForPre_L">
            <summary>
            算子嵌入时用
            </summary>
        </member>
        <member name="M:DealImageProcess.ParColorDecompose.ReadXmlRoot(System.Xml.XmlDocument)">
            <summary>
            从本地文档中，读取参数Xml
            </summary>
            <param name="xDoc"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParColorDecompose.ReadXmlRoot(System.Xml.XmlElement)">
            <summary>
            加载本地文档参数时，从根节点中读取参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParColorDecompose.ReadXmlPar(System.Xml.XmlElement)">
            <summary>
            读取算法参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParColorDecompose.WriteXmlRoot(System.Xml.XmlElement)">
            <summary>
            将参数写入xml
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParColorDecompose.WriteXmlPar(System.Xml.XmlElement)">
            <summary>
            写入算法参数参数
            </summary>
            <param name="xDoc">根节点</param>
            <returns></returns>
        </member>
        <member name="T:DealImageProcess.UCColorDecompose">
            <summary>
            UCColorDecompose.xaml 的交互逻辑
            </summary>
            <summary>
            UCColorDecompose
            </summary>
        </member>
        <member name="M:DealImageProcess.UCColorDecompose.InitColorPlane">
            <summary>
            初始化拾色器颜色板
            </summary>
        </member>
        <member name="M:DealImageProcess.UCColorDecompose.Init(Camera.BaseUCDisplayCamera,DealImageProcess.BaseParImageProcess,System.Collections.Generic.List{BasicComprehensive.CellHObjectReference})">
            <summary>
            初始化参数,独立算子
            </summary>
        </member>
        <member name="M:DealImageProcess.UCColorDecompose.Init(Camera.BaseUCDisplayCamera,DealImageProcess.BaseParImageProcess)">
            <summary>
            初始化参数
            </summary>
            <param name="baseUCCamera"></param>
            <param name="parColorDecompose"></param>
        </member>
        <member name="M:DealImageProcess.UCColorDecompose.cboTypeRegion_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            多颜色区域处理方式
            </summary>
        </member>
        <member name="M:DealImageProcess.UCColorDecompose.tsbColorRemove_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            排除颜色
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCColorDecompose.dudMinChannel1_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            通道1
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCColorDecompose.dudMinChannel2_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            通道2
            </summary>
        </member>
        <member name="M:DealImageProcess.UCColorDecompose.dudMinChannel3_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            通道3
            </summary>
        </member>
        <member name="M:DealImageProcess.UCColorDecompose.cboColorSpace_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            颜色空间切换
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCColorDecompose.ChangeSpace">
            <summary>
            改变通道
            </summary>
        </member>
        <member name="M:DealImageProcess.UCColorDecompose.sldrHue1_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            色调
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCColorDecompose.sldrSat1_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            饱和度
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCColorDecompose.sldrVal1_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            亮度
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCColorDecompose.cboImageOut_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            图像输出类型
            </summary>
        </member>
        <member name="M:DealImageProcess.UCColorDecompose.btnClear_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            清除数据
            </summary>
        </member>
        <member name="M:DealImageProcess.UCColorDecompose.RefreshDraw">
            <summary>
            刷新绘制
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCColorDecompose.ReDrawSliderSat1">
            <summary>
            重新绘制Slider的高度
            </summary>
        </member>
        <member name="M:DealImageProcess.UCColorDecompose.ConvertToDud">
            <summary>
            将Slider数据转换后显示在dud上面
            </summary>
        </member>
        <member name="M:DealImageProcess.UCColorDecompose.ConvertToSlider">
            <summary>
            将dud数据转换到Slider
            </summary>
        </member>
        <member name="M:DealImageProcess.UCColorDecompose.btnGetColor_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            在编辑的ROI内抓取颜色
            </summary>
        </member>
        <member name="M:DealImageProcess.UCColorDecompose.CalColorValue">
            <summary>
            计算颜色数值
            </summary>
        </member>
        <member name="M:DealImageProcess.UCColorDecompose.ReDrawROI">
            <summary>
            自动获取颜色之后，重新绘制ROI
            </summary>
        </member>
        <member name="M:DealImageProcess.UCColorDecompose.tsbShowResultColor_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            实时显示颜色提取结果
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCColorDecompose.StopRealResultImage">
            <summary>
            停止显示实时图像处理结果
            </summary>
        </member>
        <member name="M:DealImageProcess.UCColorDecompose.cboDebugDisplay_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            输出调试画面类型
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCColorDecompose.DealColorDecompose_Task">
            <summary>
            实时显示计算结果线程
            </summary>
        </member>
        <member name="M:DealImageProcess.UCColorDecompose.ShowColorValue">
            <summary>
            显示颜色数值
            </summary>
        </member>
        <member name="M:DealImageProcess.UCColorDecompose.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.WinColorDecompose">
            <summary>
            WinColorDecompose.xaml 的交互逻辑
            </summary>
            <summary>
            WinColorDecompose
            </summary>
        </member>
        <member name="M:DealImageProcess.WinColorDecompose.LoginEvent">
            <summary>
            事件注册
            </summary>
        </member>
        <member name="M:DealImageProcess.WinColorDecompose.StopRealResultImage">
            <summary>
            停止彩色分解实时显示
            </summary>
        </member>
        <member name="M:DealImageProcess.WinColorDecompose.btnSave_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            保存参数到本地并且退出
            </summary>
        </member>
        <member name="M:DealImageProcess.WinColorDecompose.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:DealImageProcess.ParCreatePreprocess.ReadXmlRoot(System.Xml.XmlElement)">
            <summary>
            从本地文档读取参数的时候，读取
            </summary>
            <param name="xeRoot">根节点</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:DealImageProcess.ParCreatePreprocess.ReadXmlPar(System.Xml.XmlElement)">
            <summary>
            读取算法参数
            </summary>
            <param name="xeRoot">算法参数根节点</param>
            <returns>成功</returns>
        </member>
        <member name="M:DealImageProcess.ParCreatePreprocess.WriteXmlRoot(System.Xml.XmlElement)">
            <summary>
            从Stream资源读取完整节点后，写入参数
            </summary>
            <param name="xDoc"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParCreatePreprocess.WriteXmlPar(System.Xml.XmlElement)">
            <summary>
            该算法参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="T:DealImageProcess.UCCreatePreprocess">
            <summary>
            UCCreatePreprocess.xaml 的交互逻辑
            </summary>
            <summary>
            UCCreatePreprocess
            </summary>
        </member>
        <member name="M:DealImageProcess.UCCreatePreprocess.ComboBox_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            选择算法类型
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCCreatePreprocess.cboCellRefer_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            选择关联的算法单元
            </summary>
        </member>
        <member name="M:DealImageProcess.UCCreatePreprocess.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:DealImageProcess.FunPreprocess.DealPreprocess(DealImageProcess.BaseParImageProcess,DealImageProcess.ParPreprocess,BasicClass.ImageAll,BasicClass.ImageAll,HalconDotNet.HObject,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="baseParImageProcess"></param>
            <param name="parPreprocess"></param>
            <param name="imageAll">经过Reduce</param>
            <param name="imFull">整幅图像</param>
            <param name="ho_ROI"></param>
            <param name="htResult"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.FunPreprocess.BasicImageProcess_MultROI(DealImageProcess.BaseParImageP_PreImageP,DealResult.BaseResultImageProcess,System.Collections.Hashtable,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
            通过选择相乘或者Reduce得到ROI，然后再进行Reduce
            </summary>
        </member>
        <member name="M:DealImageProcess.FunPreprocess.BasicImageProcess_MultROI(DealImageProcess.BaseParImageP_PreImageP,DealResult.BaseResultImageProcess,System.Collections.Hashtable,System.Int32,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
            包含ROI索引
            </summary>
            <param name="par"></param>
            <param name="result"></param>
            <param name="htResult"></param>
            <param name="ho_ROI"></param>
            <param name="ho_ReduceImage"></param>
            <param name="ho_Image"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="T:DealImageProcess.UCPreProcess">
            <summary>
            UCPreProcess.xaml 的交互逻辑
            </summary>
            <summary>
            UCPreProcess
            </summary>
        </member>
        <member name="M:DealImageProcess.UCPreProcess.CreateUIPreprocess(DealImageProcess.ParPreprocess,Camera.BaseUCDisplayCamera)">
            <summary>
            创建预处理算法UI
            </summary>
            <param name="parPreprocess"></param>
        </member>
        <member name="M:DealImageProcess.UCPreProcess.uCCreatePreprocess_ChangePreprocess_event">
            <summary>
            根据设定的预处理参数，进行设置
            </summary>
        </member>
        <member name="M:DealImageProcess.UCPreProcess.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:DealImageProcess.FunBlob.PreBlob(HalconDotNet.HObject,HalconDotNet.HObject,DealImageProcess.ParBlob,DealResult.ResultBlob,System.Int32,System.Int32,System.Collections.Hashtable)">
            <summary>
            求取用以计算结果的区域
            </summary>
            <param name="ho_Image"></param>
            <param name="ho_Region">二值化后的区域</param>
            <param name="par"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParBlob.Init_AuthorityCtr">
            <summary>
            初始化参数
            </summary>
        </member>
        <member name="P:DealImageProcess.ParBlob.ResultHObject_L">
            <summary>
            输出数据结果列表
            </summary>
        </member>
        <member name="M:DealImageProcess.ParBlob.ReadXmlRoot(System.Xml.XmlDocument)">
            <summary>
            初始化加载的时候读取根元素     
            </summary>
            <param name="xDoc"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParBlob.ReadXmlRoot(System.Xml.XmlElement)">
            <summary>
            记载整个配置文件的时候，读取参数
            </summary>
            <param name="xeRoot">根节点</param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParBlob.ReadXmlPar(System.Xml.XmlElement)">
            <summary>
            读取算法参数
            </summary>
            <param name="xeRoot">根节点</param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParBlob.WriteXmlPar(System.Xml.XmlElement)">
            <summary>
            算法参数
            </summary>
        </member>
        <member name="T:DealImageProcess.UCBlob">
            <summary>
            UCBlob.xaml 的交互逻辑
            </summary>
            <summary>
            UCBlob
            </summary>
        </member>
        <member name="M:DealImageProcess.UCBlob.dudXMin_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            X范围
            </summary>
        </member>
        <member name="M:DealImageProcess.UCBlob.dudMinFillArea_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            填充面积 
            </summary>
        </member>
        <member name="M:DealImageProcess.UCBlob.dudMinArea_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            面积筛选
            </summary>
        </member>
        <member name="M:DealImageProcess.UCBlob.dudOpenRadius_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            开运算，闭运算
            </summary>
        </member>
        <member name="M:DealImageProcess.UCBlob.dudCloseRect1_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            矩形剔除凸起
            </summary>
        </member>
        <member name="M:DealImageProcess.UCBlob.cboShapeTrans_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            ShapeTrans
            </summary>
        </member>
        <member name="M:DealImageProcess.UCBlob.chkParUnion_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            是否采用ROI区域联合
            </summary>
        </member>
        <member name="M:DealImageProcess.UCBlob.cboTypeOutCoord_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            输出坐标类型
            </summary>
        </member>
        <member name="M:DealImageProcess.UCBlob.cboSort_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            坐标排序
            </summary>
        </member>
        <member name="M:DealImageProcess.UCBlob.dudThRowColumn_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            行列阈值
            </summary>
        </member>
        <member name="M:DealImageProcess.UCBlob.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.WinBlob">
            <summary>
            WinBlob.xaml 的交互逻辑
            </summary>
            <summary>
            WinBlob
            </summary>
        </member>
        <member name="M:DealImageProcess.WinBlob.LoginEvent">
            <summary>
            事件注册
            </summary>
        </member>
        <member name="M:DealImageProcess.WinBlob.btnSaveOnly_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            保存
            </summary>
        </member>
        <member name="M:DealImageProcess.WinBlob.btnSave_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            保存并且退出
            </summary>
        </member>
        <member name="M:DealImageProcess.WinBlob.RefreshOutputImageProcessInit">
            <summary>
            刷新显示结果
            </summary>
        </member>
        <member name="M:DealImageProcess.WinBlob.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:DealImageProcess.FunCircle.PreCircle(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,DealImageProcess.ParCircle,DealResult.ResultCircle,System.Int32,System.Int32,System.Collections.Hashtable)">
            <summary>
            求取用以计算结果的区域
            </summary>
            <param name="ho_Image"></param>
            <param name="ho_Region">二值化后的区域</param>
            <param name="par"></param>
            <returns></returns>
        </member>
        <member name="T:DealImageProcess.UCCircle">
            <summary>
            Circle.xaml 的交互逻辑
            </summary>
            <summary>
            UCCircle
            </summary>
        </member>
        <member name="M:DealImageProcess.UCCircle.dudXMin_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            X范围
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCCircle.dudMinFillArea_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            面积填充
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCCircle.dudMinArea_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            面积筛选
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCCircle.dudOpenRadius_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            开运算，闭运算
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCCircle.dudCloseBossing_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            剔除凸起
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCCircle.cboShapeTrans_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            形状修正
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCCircle.chkParUnion_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            是否采用ROI区域联合
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCCircle.cboTypeOutCoord_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            输出坐标类型
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCCircle.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.WinCircle">
            <summary>
            WinCircle.xaml 的交互逻辑
            </summary>
            <summary>
            WinCircle
            </summary>
        </member>
        <member name="M:DealImageProcess.WinCircle.LoginEvent">
            <summary>
            事件注册
            </summary>
        </member>
        <member name="M:DealImageProcess.WinCircle.btnSaveOnly_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            保存
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.WinCircle.btnSave_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            保存并且退出
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.WinCircle.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:DealImageProcess.ParRect.ReadXmlRoot(System.Xml.XmlDocument)">
            <summary>
            初始化加载,基础参数为UI设置单元算法时传入
            </summary>
            <param name="xDoc">Stream文档</param>
            <returns></returns>     
        </member>
        <member name="M:DealImageProcess.ParRect.ReadXmlRoot(System.Xml.XmlElement)">
            <summary>
            从本地文档读取参数的时候，读取
            </summary>
            <param name="xeRoot">根节点</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:DealImageProcess.ParRect.ReadXmlPar(System.Xml.XmlElement)">
            <summary>
            读取该算法参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParRect.WriteXmlRoot(System.Xml.XmlElement)">
            <summary>
            向根节点中写入参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.ParRect.WriteXmlPar(System.Xml.XmlElement)">
            <summary>
            算法参数
            </summary>
            <param name="xeRoot"></param>
            <returns></returns>
        </member>
        <member name="T:DealImageProcess.Rect">
            <summary>
            Rect.xaml 的交互逻辑
            </summary>
            <summary>
            Rect
            </summary>
        </member>
        <member name="M:DealImageProcess.Rect.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.WinRect">
            <summary>
            WinRect.xaml 的交互逻辑
            </summary>
            <summary>
            WinRect
            </summary>
        </member>
        <member name="M:DealImageProcess.WinRect.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:DealImageProcess.DrawROI.AddROI(Camera.BaseUCDisplayCamera,System.Double[],DealImageProcess.TypeROI_enum,System.String,System.String,System.String,System.Int32)">
            <summary>
            通过输入的点，对ROI区域进行重绘
            </summary>
        </member>
        <member name="M:DealImageProcess.DrawROI.AddROIPoly(Camera.BaseUCDisplayCamera,DealImageProcess.ParROI,System.String,System.Int32)">
            <summary>
            增加多边形，包括了矩形1
            </summary>
        </member>
        <member name="M:DealImageProcess.DrawROI.AddROIRect2(Camera.BaseUCDisplayCamera,DealImageProcess.ParROI,System.String,System.Int32)">
            <summary>
            增加矩形2ROI
            </summary>
        </member>
        <member name="M:DealImageProcess.DrawROI.AddROIMCircle(Camera.BaseUCDisplayCamera,DealImageProcess.ParROI,System.String,System.Int32)">
            <summary>
            增加MCircle
            </summary>
        </member>
        <member name="M:DealImageProcess.DrawROI.ConvertROI(DealImageProcess.ParROI,System.Double[])">
            <summary>
            将绘制ROI得到的点，存入点List
            </summary>
        </member>
        <member name="M:DealImageProcess.DrawROI.ConvertROI_MCircle(DealImageProcess.ParROI,System.Collections.Generic.List{System.Double[]},System.Int32)">
            <summary>
            将绘制ROI得到的点，存入点List
            </summary>
        </member>
        <member name="M:DealImageProcess.FunROI.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:DealImageProcess.FunROI.CreateROI(DealImageProcess.ParROI,System.Collections.Hashtable,System.Boolean@,System.String@)">
            <summary>
            生成ROI
            </summary>
            <param name="par"></param>
            <param name="htResult"></param>
            <param name="blResult"></param>
            <param name="anno"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.FunROI.CreateRegionROI(DealImageProcess.ParROI)">
            <summary>
            使用region生成ROI
            </summary>
        </member>
        <member name="M:DealImageProcess.FunROI.CreateROI(DealImageProcess.ParROI,System.Boolean@,System.String@)">
            <summary>
            生成ROI
            </summary>
            <param name="parROI"></param>
            <param name="blResult"></param>
            <param name="anno"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.FunROI.CreateROI(DealImageProcess.ParROI,System.Collections.Hashtable,System.Int32,System.Boolean@,System.String@)">
            <summary>
            根据索引生成ROI
            </summary>
            <param name="parROI"></param>
            <param name="index"></param>
            <param name="blResult"></param>
            <param name="anno"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.FunROI.CreateROIInit(DealImageProcess.ParROI)">
            <summary>
            根据当前的值，生成ROI
            </summary>
            <param name="parROI">ROI类</param>
            <returns>ROIRegion</returns>
        </member>
        <member name="M:DealImageProcess.FunROI.CreateROIExcludeInit(DealImageProcess.ParROI,System.Int32)">
            <summary>
            排除当前索引,目前只能排除0索引
            </summary>
            <param name="parROI"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.FunROI.CreateOneROIInit(DealImageProcess.ParROI)">
            <summary>
            针对单一ROI区域计算Region,不计入偏差
            </summary>
            <param name="parROI">整个ROI</param>
            <returns>region</returns>        
        </member>
        <member name="M:DealImageProcess.FunROI.CreateOneROIInit(DealImageProcess.ParROI,System.Int32)">
            <summary>
            针对单一ROI区域计算Region,不计入偏差
            </summary>
            <param name="parROI">整个ROI</param>
            <returns>region</returns>        
        </member>
        <member name="M:DealImageProcess.FunROI.CreateOneROI(DealImageProcess.ParROI,System.Collections.Hashtable,System.Boolean@,System.String@)">
            <summary>
            针对单一ROI区域计算Region,不计入偏差
            </summary>
            <param name="parROI">整个ROI</param>
            <returns>region</returns>        
        </member>
        <member name="M:DealImageProcess.FunROI.CreateRect1Init(DealImageProcess.ParROI)">
            <summary>
            不传入结果类进行偏移计算，
            </summary>
            <param name="parROI">整个ROI</param>
            <returns>region</returns>        
        </member>
        <member name="M:DealImageProcess.FunROI.CreateRect1(DealImageProcess.ParROI,System.Boolean@,System.String@)">
            <summary>
            根据外部传入的结果类进行偏移计算，
            </summary>
            <param name="parROI">整个ROI</param>
            <returns>region</returns>   
        </member>
        <member name="M:DealImageProcess.FunROI.CreateRect2Init(DealImageProcess.ParROI)">
            <summary>
            不传入结果类进行偏移计算，
            </summary>
            <param name="parROI">整个ROI</param>     
        </member>
        <member name="M:DealImageProcess.FunROI.CreateRect2(DealImageProcess.ParROI,System.Boolean@,System.String@)">
            <summary>
            根据外部传入的结果类进行偏移计算，矩形2采用仿射变换
            </summary>
            <param name="parROI">整个ROI</param>
        </member>
        <member name="M:DealImageProcess.FunROI.CreateCircleInit(DealImageProcess.ParROI)">
            <summary>
            不传入结果类进行偏移计算，
            </summary>
            <param name="parROI">整个ROI</param>
            <returns>region</returns>        
        </member>
        <member name="M:DealImageProcess.FunROI.CreateCircle(DealImageProcess.ParROI,System.Boolean@,System.String@)">
            <summary>
            根据外部传入的结果类进行偏移计算，
            </summary>
            <param name="parROI">整个ROI</param>
            <returns>region</returns>   
        </member>
        <member name="M:DealImageProcess.FunROI.CreateMCircleInit(DealImageProcess.ParROI,System.Collections.Generic.List{HalconDotNet.HObject}@)">
            <summary>
            不传入结果类进行偏移计算，
            </summary>
            <param name="parROI">整个ROI</param>
            <returns>region</returns>        
        </member>
        <member name="M:DealImageProcess.FunROI.CreateMCircle(DealImageProcess.ParROI,System.Collections.Generic.List{HalconDotNet.HObject}@)">
            <summary>
            不传入结果类进行偏移计算，
            </summary>
            <param name="parROI">整个ROI</param>
            <param name="ROI_L">矩形2</param>
            <returns>region</returns>        
        </member>
        <member name="M:DealImageProcess.FunROI.CreateMCircle(DealImageProcess.ParROI,System.Collections.Hashtable,System.Collections.Generic.List{HalconDotNet.HObject}@,System.Boolean@,System.String@)">
            <summary>
            根据外部传入的结果类进行偏移计算，
            </summary>
            <param name="parROI"></param>
            <param name="htResult"></param>
            <param name="blResult"></param>
            <param name="rOI_L"></param>
            <param name="anno"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.FunROI.CreatePolygonInit(DealImageProcess.ParROI)">
            <summary>
            不传入结果类进行偏移计算，
            </summary>
            <param name="parROI">整个ROI</param>
            <returns>region</returns>        
        </member>
        <member name="M:DealImageProcess.FunROI.CreatePolygon(DealImageProcess.ParROI,System.Boolean@,System.String@)">
            <summary>
            根据外部传入的结果类进行偏移计算，
            </summary>
            <param name="parROI">整个ROI</param>
            <returns>region</returns>        
        </member>
        <member name="M:DealImageProcess.FunROI.PointAdjust(DealImageProcess.ParROI,System.Boolean@,System.String@)">
            <summary>
            根据关联算法结果求取偏差
            </summary>
        </member>
        <member name="M:DealImageProcess.FunROI.CreateMatchROI(DealImageProcess.BaseROIPoint,System.Boolean@,System.String@)">
            <summary>
            匹配算法输出结果
            </summary>
            <param name="baseROIPoint"></param>
            <param name="blResult"></param>
            <param name="anno"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.FunROI.CreateLocationROI(DealImageProcess.BaseROIPoint,System.Boolean@,System.String@)">
            <summary>
            定位
            </summary>
            <param name="baseROIPoint"></param>
            <param name="blResult"></param>
            <param name="anno"></param>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.FunROI.DisplayAllROI(BasicDisplay.BaseUCDisplay,DealImageProcess.ParROI,System.Collections.Hashtable)">
            <summary>
            显示所有的ROI
            </summary>
        </member>
        <member name="M:DealImageProcess.FunROI.DisplayDrawROI(BasicDisplay.BaseUCDisplay,DealImageProcess.ParROI)">
            <summary>
            显示绘制的ROI
            </summary>
            <param name="baseUCDisplay"></param>
            <param name="par"></param>
        </member>
        <member name="M:DealImageProcess.FunROI.DisplayDrawROI_MCircle(BasicDisplay.BaseUCDisplay,DealImageProcess.ParROI,System.Double,System.String)">
            <summary>
            显示MCircle
            </summary>
        </member>
        <member name="M:DealImageProcess.FunROI.DisplayRegionROI(BasicDisplay.BaseUCDisplay,DealImageProcess.ParROI,System.Collections.Hashtable)">
            <summary>
            显示区域的ROI
            </summary>
        </member>
        <member name="T:DealImageProcess.UCSetROI">
            <summary>
            UCSetROI.xaml 的交互逻辑
            </summary>
            <summary>
            UCSetROI
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSetROI.SelectReference_DrawROI">
            <summary>
            结果关联
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSetROI.SelectReference_RegionReference">
            <summary>
            区域作为ROI
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSetROI.uCCellDataReference_CellDataReference_event(BasicComprehensive.CellReference,DealResult.ResultReference)">
            <summary>
            设定单元结果关联值
            </summary>
            <param name="cellReference"></param>
            <param name="resultReference"></param>
        </member>
        <member name="M:DealImageProcess.UCSetROI.DelAllROIReference">
            <summary>
            删除所有关联
            </summary>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.UCSetROI.DelPointROIReference">
            <summary>
            删除关联
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSetROI.DeleteReference">
            <summary>
            删除关联
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSetROI.SetAllROIReference">
            <summary>
            设置所有ROI的点位关联
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSetROI.SetPointROIReference">
            <summary>
            修改点位关联
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSetROI.GetSelectPoint">
            <summary>
            获取选中的点位
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSetROI.SetValueReference">
            <summary>
            设置关联值
            </summary>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.UCSetROI.SetAllROISelect">
            <summary>
            设置每行ROI选中
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSetROI.ShowPar_Reference">
            <summary>
            显示ROI点数据关联
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSetROI.SetRegionReference">
            <summary>
            设置算法区域关联
            </summary>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.UCSetROI.DelRegionReference">
            <summary>
            删除关联
            </summary>
            <returns></returns>
        </member>
        <member name="M:DealImageProcess.UCSetROI.RefreshDgRegionReference">
            <summary>
            设置采用区域的关联值
            </summary>
        </member>
        <member name="F:DealImageProcess.UCSetROI.indexColorROIPoint">
            <summary>
            ROI点颜色
            </summary>
        </member>
        <member name="F:DealImageProcess.UCSetROI.indexColorROILine">
            <summary>
            ROI线颜色
            </summary>
        </member>
        <member name="F:DealImageProcess.UCSetROI.indexColorROIShow">
            <summary>
            ROI显示颜色
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSetROI.LoginEvent">
            <summary>
             事件注册
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSetROI.Init(Camera.BaseUCDisplayCamera,DealImageProcess.BaseParImageP_ROI,System.Collections.Generic.List{BasicComprehensive.CellHObjectReference},System.Collections.Generic.List{BasicComprehensive.CellReference},System.Collections.Hashtable)">
            <summary>
            初始化加载
            </summary>
            <param name="baseUCCamera"></param>
            <param name="par"></param>
            <param name="cellHObject_L"></param>
            <param name="cellData_L"></param>
            <param name="htResult"></param>
        </member>
        <member name="M:DealImageProcess.UCSetROI.CheckROIValue">
            <summary>
            校验ROI设置是否正确
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSetROI.InitGPDealROI">
            <summary>
            根据参数类型，修正ROI界面的部分控件
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSetROI.g_DrawDisplay_IndexShape(System.Int32,System.Int32,System.String)">
            <summary>
            绘制形状的索引
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:DealImageProcess.UCSetROI.ChangebyTypeUse">
            <summary>
            使能ROI设置单元
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSetROI.tsbROIGrayBackgroud_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            ROI裁剪背景
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSetROI.btnAdd_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            增加ROI，会复制当前被选中的ROI 
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSetROI.btnDel_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            删除
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSetROI.btnClearDelta_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            清除关联至
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSetROI.InitSelectIndex">
            <summary>
            初始化化时，默认选择第一行显示
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSetROI.dgROI_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            根据选择的不同行，使对应ROI可以编辑
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSetROI.btnEnableChange_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            使能当前ROI为可编辑
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSetROI.btnPreROI_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            上一个ROI
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSetROI.btnNextROI_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            下一个ROI
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSetROI.SelectDrawROI">
            <summary>
            执行选择ROI
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSetROI.btnDrawROI_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            回去绘制后ROI的坐标
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSetROI.btnResetROI_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            绘制新的ROI区域
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSetROI.ResetSelectedROI">
            <summary>
            根据更改重新绘制选中的ROI区域
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSetROI.ReDrawAllROI">
            <summary>
            绘制所有的ROI
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSetROI.ReDrawROI(System.Int32)">
            <summary>
            使当前区域变成可编辑,并传入点的序号
            </summary>
            <param name="index"></param>
        </member>
        <!-- 对于成员“M:DealImageProcess.UCSetROI.ConvertROI(System.Double[])”忽略有格式错误的 XML 注释 -->
        <member name="M:DealImageProcess.UCSetROI.cboColorLineROI_ColorChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.String})">
            <summary>
            修改ROI线颜色
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCSetROI.dudWidthLineROI_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            设置ROI线宽度
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCSetROI.tsbDisplayROI_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            是否显示ROI
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCSetROI.rdoSelectAll_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            全选
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCSetROI.rdoSelectNull_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            全不选
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCSetROI.CopyNewROI">
            <summary>
            增加最后一个ROI
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSetROI.win_SaveROI_event(DealImageProcess.ParROI)">
            <summary>
            保存ROI
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSetROI.tsbAllROI_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            设置是否所有的ROI进行关联
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSetROI.btnSetReference_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            区分修改所有或者单个ROI
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSetROI.SetReference_DrawROI">
            <summary>
            将绘制的ROI进行关联
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSetROI.btnDelReference_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            区分修改所有或者单个ROI
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCSetROI.dgPointROI_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            选中某一个点位，并重绘该点的颜色
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCSetROI.dudValueAdjust_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            通过对调整值的修改，可以修改点位的实际坐标
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DealImageProcess.UCSetROI.ReDrawMove">
            <summary>
            重绘，和数据重新显示
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSetROI.InitIndexROI(System.Int32)">
            <summary>
            初始化UCMoveROI的index
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSetROI.ReadOnlyROIType">
            <summary>
            ROI类型只读编辑
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSetROI.LogoutEvent">
            <summary>
             事件注册
            </summary>
        </member>
        <member name="M:DealImageProcess.UCSetROI.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DealImageProcess.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:DealImageProcess.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:DealImageProcess.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="T:DealImageProcess.TypeImageProcess">
            <summary>
            TypeLocation.xaml 的交互逻辑
            </summary>
            <summary>
            TypeImageProcess
            </summary>
        </member>
        <member name="M:DealImageProcess.TypeImageProcess.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
