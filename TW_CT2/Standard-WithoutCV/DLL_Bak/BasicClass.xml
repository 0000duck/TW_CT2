<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BasicClass</name>
    </assembly>
    <members>
        <member name="M:BasicClass.BaseClass.Clone">
            <summary>
            深度复制类的副本
            </summary>
        </member>
        <member name="M:BasicClass.BaseClass.ReadRegedit(System.String)">
            <summary>
            读取注册表
            </summary>
        </member>
        <member name="T:BasicClass.VerInfo">
            <summary>
            版本信息
            </summary>
        </member>
        <member name="T:BasicClass.BasePropForRef">
            <summary>
            为反射定义的类
            </summary>
        </member>
        <member name="M:BasicClass.DispCircle.#ctor(System.Double,System.Double,System.Double,System.String)">
            <summary>
            按照Halcon的惯例先传入Y，再X
            </summary>
            <param name="y"></param>
            <param name="x"></param>
            <param name="size"></param>
            <param name="strColor"></param>
        </member>
        <member name="M:BasicClass.DispMCircle.#ctor(System.Double,System.Double,System.Double,System.String,System.Double)">
            <summary>
            按照Halcon的惯例先传入Y，再X
            </summary>
            <param name="y"></param>
            <param name="x"></param>
            <param name="size"></param>
            <param name="strColor"></param>
        </member>
        <member name="M:BasicClass.DispEllipse.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.Double)">
            <summary>
            按照Halcon的惯例先传入Y，再X
            </summary>
            <param name="y"></param>
            <param name="x"></param>
            <param name="phi"></param>
            <param name="radius1"></param>
            <param name="radius2"></param>
            <param name="strColor"></param>
        </member>
        <member name="T:BasicClass.ParLanguage">
            <summary>
            语言设置,20190424
            </summary>
        </member>
        <member name="M:BasicClass.ParLanguage.ReadIni">
            <summary>
            读取Ini
            </summary>
            <returns></returns>
        </member>
        <member name="M:BasicClass.ParLanguage.WriteIni">
            <summary>
            写入Ini
            </summary>
            <returns></returns>
        </member>
        <member name="M:BasicClass.ParLanguage.ReadIniStr(System.String,System.String,System.String,System.String)">
            <summary>
            读取ini
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="strDefault">默认值</param>
            <param name="path">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:BasicClass.ParLanguage.WriteIni(System.String,System.String,System.String,System.String)">
            <summary>
            写入string型
            </summary>
        </member>
        <member name="T:BasicClass.Language_enum">
            <summary>
            语言枚举
            </summary>
        </member>
        <member name="T:BasicClass.WinMsgBox">
            <summary>
            Login.xaml 的交互逻辑
            </summary>
            <summary>
            WinMsgBox
            </summary>
        </member>
        <member name="M:BasicClass.WinMsgBox.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:BasicClass.WinMsgBox.ShowMsgBox(System.String)">
            <summary>
            显示信息
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:BasicClass.WinMsgBox.ShowMsgBox(System.String,System.Boolean)">
            <summary>
            显示信息，并传入OK，或者NG
            </summary>
            <param name="content"></param>
            <param name="blResult"></param>
            <returns></returns>
        </member>
        <member name="M:BasicClass.WinMsgBox.ShowMsgBox(System.String,System.Boolean,System.Int32)">
            <summary>
            显示信息，并传入OK，或者NG
            </summary>
            <param name="content"></param>
            <param name="blResult"></param>
            <param name="time">指定延迟后关闭窗体,时间为负，则退出关闭</param>
            <returns></returns>
        </member>
        <member name="M:BasicClass.WinMsgBox.MetroWindow_Closing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            关闭窗体
            </summary>
        </member>
        <member name="M:BasicClass.WinMsgBox.BtnYes_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            选择是
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:BasicClass.WinMsgBox.BtnNo_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            选择否
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:BasicClass.WinMsgBox.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:BasicClass.WinSelectBox">
            <summary>
            Login.xaml 的交互逻辑
            </summary>
            <summary>
            WinSelectBox
            </summary>
        </member>
        <member name="M:BasicClass.WinSelectBox.ShowSelectBox(System.String,System.String,System.Boolean)">
            <summary>
            提供rdo选择
            </summary>
            <param name="content1"></param>
            <param name="content2"></param>
            <param name="blSelect"></param>
            <returns></returns>
        </member>
        <member name="M:BasicClass.WinSelectBox.MetroWindow_Closing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            关闭窗体
            </summary>
        </member>
        <member name="M:BasicClass.WinSelectBox.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:BasicClass.BaseMetroWindow.LocationRight">
            <summary>
            主窗体最右端停靠
            </summary>
        </member>
        <member name="M:BasicClass.BaseMetroWindow.LocationLeft">
            <summary>
            主窗体最右端停靠
            </summary>
        </member>
        <member name="M:BasicClass.BaseMetroWindow.ShowPar_Invoke">
            <summary>
            显示参数
            </summary>
        </member>
        <member name="M:BasicClass.BaseMetroWindow.Show">
            <summary>
            窗体显示
            </summary>
        </member>
        <member name="M:BasicClass.BaseMetroWindow.NullReturn">
            <summary>
            无权限返回
            </summary>
            <returns></returns>
        </member>
        <member name="M:BasicClass.BaseMetroWindow.WorkerReturn">
            <summary>
            技术员权限返回
            </summary>
            <returns></returns>
        </member>
        <member name="M:BasicClass.BaseMetroWindow.EngineerReturn">
            <summary>
            工程师权限返回
            </summary>
            <returns></returns>
        </member>
        <member name="T:BasicClass.ColorHalcon_enum">
             <summary>
            Halcon 颜色变量的枚举
             </summary>
        </member>
        <member name="T:BasicClass.ColorWPF_enum">
            <summary>
            WPF颜色
            </summary>
        </member>
        <member name="T:BasicClass.Time_enum">
            <summary>
            注销时间
            </summary>
        </member>
        <member name="T:BasicClass.TypeFill_enum">
            <summary>
            Halcon窗体填充类型 
            </summary>
        </member>
        <member name="T:BasicClass.TriggerSource_enum">
            <summary>
            事件的触发源
            </summary>
        </member>
        <member name="T:BasicClass.CoordType_enum">
            <summary>
            坐标系类型
            </summary>
        </member>
        <member name="T:BasicClass.Pos_enum">
            <summary>
            拍照位置序号
            </summary>
        </member>
        <member name="M:BasicClass.Point2D.Add(BasicClass.Point2D,BasicClass.Point2D)">
            <summary>
            两个点之间的加法
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:BasicClass.Point2D.Sub(BasicClass.Point2D,BasicClass.Point2D)">
            <summary>
            两个点之间的减法
            </summary>
        </member>
        <member name="M:BasicClass.Point2D.ToString">
            <summary>
            重写ToString 方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:BasicClass.Point2D.op_Addition(BasicClass.Point2D,BasicClass.Point2D)">
            <summary>
            重载运算符
            </summary>
            <param name="P1"></param>
            <param name="P2"></param>
            <returns></returns>
        </member>
        <member name="M:BasicClass.Point3D.Add(BasicClass.Point3D,BasicClass.Point3D)">
            <summary>
            两个点之间的加法
            </summary>
        </member>
        <member name="M:BasicClass.Point3D.Sub(BasicClass.Point3D,BasicClass.Point3D)">
            <summary>
            两个点之间的减法
            </summary>
        </member>
        <member name="M:BasicClass.Point3D.op_Addition(BasicClass.Point3D,BasicClass.Point3D)">
            <summary>
            重载运算符
            </summary>
            <param name="P1"></param>
            <param name="P2"></param>
            <returns></returns>
        </member>
        <member name="M:BasicClass.Point3D.ToString">
            <summary>
            重写ToString 方法
            </summary>
        </member>
        <member name="M:BasicClass.Point4D.Add(BasicClass.Point4D,BasicClass.Point4D)">
            <summary>
            两个点之间的加法
            </summary>
        </member>
        <member name="M:BasicClass.Point4D.Sub(BasicClass.Point4D,BasicClass.Point4D)">
            <summary>
            两个点之间的减法
            </summary>
        </member>
        <member name="M:BasicClass.Point4D.Add(System.Int32,System.Double)">
            <summary>
            重载加法,修改自身的值
            </summary>
            <param name="index">序号，0，1，2，3</param>
            <param name="value">需要相加的值</param>
            <returns></returns>
        </member>
        <member name="M:BasicClass.Point4D.Sub(System.Int32,System.Double)">
            <summary>
            重载加法,修改自身的值
            </summary>
            <param name="index">序号，0，1，2，3</param>
            <param name="value">需要相减的值</param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:BasicClass.Point4D.op_Addition(BasicClass.Point4D,BasicClass.Point4D)”忽略有格式错误的 XML 注释 -->
        <member name="M:BasicClass.Point4D.ToString">
            <summary>
            重写ToString 方法
            </summary>
        </member>
        <member name="M:BasicClass.Point5D.Add(BasicClass.Point5D,BasicClass.Point5D)">
            <summary>
            两个点之间的加法
            </summary>
        </member>
        <member name="M:BasicClass.Point5D.Sub(BasicClass.Point5D,BasicClass.Point5D)">
            <summary>
            两个点之间的减法
            </summary>
        </member>
        <member name="M:BasicClass.Point5D.ToString">
            <summary>
            重写ToString 方法
            </summary>
        </member>
        <member name="M:BasicClass.Point6D.Add(BasicClass.Point6D,BasicClass.Point6D)">
            <summary>
            两个点之间的加法
            </summary>
        </member>
        <member name="M:BasicClass.Point6D.Sub(BasicClass.Point6D,BasicClass.Point6D)">
            <summary>
            两个点之间的减法
            </summary>
        </member>
        <member name="M:BasicClass.Point6D.ToString">
            <summary>
            重写ToString 方法
            </summary>
        </member>
        <member name="T:BasicClass.ImageAll">
            <summary>
            图像类
            </summary>
        </member>
        <member name="P:BasicClass.ImageAll.Color">
            <summary>
            Halcon颜色
            </summary>
        </member>
        <member name="P:BasicClass.ImageAll.TypeFill">
            <summary>
            HObject的填充
            </summary>
        </member>
        <member name="M:BasicClass.ImageAll.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:BasicClass.ImageAll.#ctor(HalconDotNet.HObject)">
            <summary>
            构造函数
            </summary>
            <param name="ho_Image"></param>
        </member>
        <member name="M:BasicClass.ImageAll.#ctor(HalconDotNet.HObject,System.Drawing.Bitmap)">
            <summary>
            构造函数
            </summary>
            <param name="ho_Image"></param>
            <param name="bit"></param>
        </member>
        <member name="M:BasicClass.ImageAll.Clone">
            <summary>
            Clone
            </summary>
        </member>
        <member name="M:BasicClass.ImageAll.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:BasicClass.FormatImage_enum">
            <summary>
            图片格式 
            </summary>
        </member>
        <member name="T:BasicClass.TypeHObject_enum">
            <summary>
            Halcon类型
            </summary>
        </member>
        <member name="T:BasicClass.Log">
            <summary>
            日志记录
            </summary>
        </member>
        <member name="M:BasicClass.Log.WriteError(System.String,System.Exception,System.String)">
            <summary>
            写入错误，
            </summary>
            <param name="name"></param>
            <param name="ex"></param>
            <param name="annotation">对错误的补充说明</param>
        </member>
        <member name="M:BasicClass.Log.GetDirectoryNum(System.String)">
            <summary>
            获取文件夹个数
            </summary>
            <param name="path">根目录</param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:BasicClass.Log.DeleteDir(System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:BasicClass.Log.DeleteDir(System.String,System.Int32)">
            <summary>
            按照时间顺序删除文件
            </summary>
            <param name="path">根目录</param>
            <param name="num">删除的文件夹个数下限</param>
        </member>
        <member name="M:BasicClass.Log.CreateDayFile(System.String)">
            <summary>
            在指定的目录下面创建以小时为单位的文件夹
            </summary>
        </member>
        <member name="M:BasicClass.Log.CreateAllTimeFile(System.String)">
            <summary>
            在指定的目录下面创建以小时为单位的文件夹
            </summary>
        </member>
        <member name="M:BasicClass.Log.WriteLog(System.String,System.String[])">
            <summary>
            写日志
            </summary>
            <param name="logArr">多个日志内容</param>
            <param name="pathFile">完整的日志路径</param>
        </member>
        <member name="T:BasicClass.ParPathRoot">
            <summary>
            根目录相关文件
            </summary>
        </member>
        <member name="M:BasicClass.ParPathRoot.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:BasicClass.ParPathRoot.KeyRoot">
            <summary>
            系统根目录
            </summary>       
        </member>
        <member name="P:BasicClass.ParPathRoot.PathRoot">
            <summary>
            参数根目录
            </summary>
        </member>
        <member name="P:BasicClass.ParPathRoot.PathRootRecord">
            <summary>
            软件运行记录根目录20181128-zx
            </summary>
        </member>
        <member name="F:BasicClass.ParPathRoot.g_ParPathRoot_L">
            <summary>
            已经设置过的根目录列表
            </summary>
        </member>
        <member name="M:BasicClass.ParPathRoot.ReadRootPath">
            <summary>
            读取根目录
            </summary>
        </member>
        <member name="M:BasicClass.ParPathRoot.WriteRootPath">
            <summary>
            写入根目录
            </summary>
        </member>
        <member name="M:BasicClass.ParPathRoot.ReadIniOldPath">
            读取旧路径
        </member>
        <member name="M:BasicClass.ParPathRoot.WriteIni(System.String,System.String,System.String,System.String)">
            <summary>
            写入string型
            </summary>
        </member>
        <member name="M:BasicClass.ParPathRoot.DealNLogConfig">
            <summary>
            处理配置文件的根目录
            </summary>
        </member>
        <member name="M:BasicClass.ParPathRoot.ReadRegedit(System.String)">
            <summary>
            读取注册表
            </summary>
        </member>
        <member name="M:BasicClass.ParPathRoot.WriteRegedit(System.String,System.String)">
            <summary>
            写注册表  
            </summary>
        </member>
        <member name="T:BasicClass.WinPathRoot">
            <summary>
            WinComprehensive.xaml 的交互逻辑
            </summary>
            <summary>
            WinPathRoot
            </summary>
        </member>
        <member name="M:BasicClass.WinPathRoot.tsbImage_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            图片单独设置存储路径
            </summary>
        </member>
        <member name="M:BasicClass.WinPathRoot.txtPathRootImage_GotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            图片根目录获取焦点
            </summary>
        </member>
        <member name="M:BasicClass.WinPathRoot.btnSet_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            设置根目录
            </summary>
        </member>
        <member name="M:BasicClass.WinPathRoot.btnSetRootImage_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            设置图像存储目录
            </summary>
        </member>
        <member name="M:BasicClass.WinPathRoot.dgOldPath_MouseDoubleClick(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            选择历史路径20190331
            </summary>
        </member>
        <member name="M:BasicClass.WinPathRoot.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:BasicClass.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:BasicClass.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:BasicClass.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:BasicClass.BaseControl.StrSave">
            <summary>
            保存
            </summary>
        </member>
        <member name="P:BasicClass.BaseControl.OKSave">
            <summary>
            保存成功字符
            </summary>
        </member>
        <member name="P:BasicClass.BaseControl.NGSave">
            <summary>
            保存失败
            </summary>
        </member>
        <member name="P:BasicClass.BaseControl.NameAnnotation">
            <summary>
            注释名称
            </summary>
        </member>
        <member name="M:BasicClass.BaseControl.ShowPar_Invoke">
            <summary>
            显示参数
            </summary>
        </member>
        <member name="T:BasicClass.BaseWindow">
            <summary>
            窗体基类
            </summary>
        </member>
        <member name="P:BasicClass.BaseWindow.StrSave">
            <summary>
            保存
            </summary>
        </member>
        <member name="P:BasicClass.BaseWindow.OKSave">
            <summary>
            保存成功字符
            </summary>
        </member>
        <member name="P:BasicClass.BaseWindow.NGSave">
            <summary>
            保存失败
            </summary>
        </member>
        <member name="P:BasicClass.BaseWindow.StrClose">
            <summary>
            退出
            </summary>
        </member>
        <member name="P:BasicClass.BaseWindow.NameAnnotation">
            <summary>
            注释名称
            </summary>
        </member>
        <member name="M:BasicClass.BaseWindow.LocationRight">
            <summary>
            主窗体最右端停靠
            </summary>
        </member>
        <member name="M:BasicClass.BaseWindow.LocationLeft">
            <summary>
            主窗体最右端停靠
            </summary>
        </member>
        <member name="M:BasicClass.BaseWindow.ShowPar_Invoke">
            <summary>
            显示参数
            </summary>
        </member>
        <member name="M:BasicClass.BaseWindow.Show">
            <summary>
            窗体显示
            </summary>
        </member>
        <member name="M:BasicClass.BaseWindow.SetBtnAuthority">
            <summary>
            设置按钮权限
            </summary>
        </member>
        <member name="M:BasicClass.BaseWindow.NullReturn">
            <summary>
            无权限返回
            </summary>
            <returns></returns>
        </member>
        <member name="M:BasicClass.BaseWindow.WorkerReturn">
            <summary>
            技术员权限返回
            </summary>
            <returns></returns>
        </member>
        <member name="M:BasicClass.BaseWindow.EngineerReturn">
            <summary>
            工程师权限返回
            </summary>
            <returns></returns>
        </member>
        <member name="M:BasicClass.BaseWindow.TriggerCloseEvent">
            <summary>
            触发关闭窗体事件
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
