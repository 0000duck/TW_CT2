<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BasicDisplay</name>
    </assembly>
    <members>
        <member name="M:BasicDisplay.BaseUCDisplay.ccImage_MouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            鼠标左键按下
            </summary>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.ccImage_MouseLeftButtonUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            鼠标左键抬起
            </summary>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.ccImage_MouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            鼠标移动
            </summary>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.ccImage_MouseWheel(System.Object,System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            鼠标滚轮
            </summary>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.Domousemove(System.Windows.Controls.ContentControl,System.Windows.Input.MouseEventArgs)">
            <summary>
            移动
            </summary>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.DowheelZoom(System.Windows.Media.TransformGroup,System.Windows.Point,System.Double)">
            <summary>
            缩放
            </summary>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.Refresh_Rect2">
            <summary>
            重绘矩形2
            </summary>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.GetHWinFocus">
            <summary>
            设置窗口焦点
            </summary>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.AddRect2(System.Double[],System.String,System.String,System.String,System.Int32)">
            <summary>
            增加Rect2
            </summary>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.AddMCircle(System.Double[],System.String,System.String,System.String,System.Int32)">
            <summary>
            增加Rect2
            </summary>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.AddPolygon(System.Double[],System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            调用绘图功能，根据输入的点坐标，输出点位，并转换为画图坐标
            </summary>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.GetFocusHWin">
            <summary>
            获取窗体焦点
            </summary>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.DrawPointCross">
            <summary>
            获取当前点坐标
            </summary>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.GetMousePos(HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
            获取鼠标点击的位置坐标
            </summary>
            <param name="hv_Row"></param>
            <param name="hv_Column"></param>
            <param name="hv_Button"></param>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.GetROIPoints(System.String,System.Int32)">
            <summary>
            获取ROI形状的点位信息
            </summary>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.GetROIPoints_MCircle(System.String,System.Int32)">
            <summary>
            获取ROI形状的点位信息MCircle
            </summary>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.ConvertRect1ToPixel(System.Double[])">
            <summary>
            按照比例系数，对矩形1坐标进行转换,转换到图像的像素
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.ConvertRect2ToPixel(System.Double[])">
            <summary>
            按照比例系数转换矩形2
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.ConvertPolygonToPixel(System.Double[])">
            <summary>
            按照比例系数，对多边形坐标进行转换,转换到图像的像素
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.ConvertPointToCanvas(System.Double[])">
            <summary>
            按照比例系数，对坐标进行转换,转换到Canvas控件显示
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.DispString(System.String,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            显示字符在指定的行列号
            </summary>
            <param name="text">文本</param>
            <param name="fontSize">字体大小</param>
            <param name="col">字体起始列</param>
            <param name="row">字体起始行</param>
            <param name="strColor">字体颜色</param>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.TranslateImage(BasicClass.ImageAll)">
            <summary>
            变换图像方向
            </summary>
            <param name="imageAll">相机或者本地传入的原图</param>
            <returns></returns>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.TranslateHImage(BasicClass.ImageAll)">
            <summary>
            Halcon变换图像方向
            </summary>
            <param name="imageAll">相机或者本地传入的原图</param>
            <returns></returns>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.TranslateBImage(BasicClass.ImageAll)">
            <summary>
            BitmapSource变换方向
            </summary>
            <param name="imageAll"></param>
            <returns></returns>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.RecoverImage(HalconDotNet.HObject)">
            <summary>
            还原图像
            </summary>
            <param name="ho_Image"></param>
            <returns></returns>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.LoginEvent_HalconMouse">
            <summary>
            注册事件
            </summary>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.LogOutEvent_HalconMouse">
            <summary>
            注销事件
            </summary>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.EnableHalWin(System.Boolean)">
            <summary>
            使能窗体事件
            </summary>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.hWDispImage_HMouseUp(System.Object,HalconDotNet.HMouseEventArgsWPF)">
            <summary>
            鼠标按钮抬起
            </summary>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.hWDispImage_HMouseDown(System.Object,HalconDotNet.HMouseEventArgsWPF)">
            <summary>
            鼠标按钮按下
            </summary>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.hWDispImage_HMouseWheel(System.Object,HalconDotNet.HMouseEventArgsWPF)">
            <summary>
            鼠标滚轮事件响应
            </summary>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.hWDispImage_HMouseMove(System.Object,HalconDotNet.HMouseEventArgsWPF)">
            <summary>
            鼠标移动事件响应
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.ShowPosandGray(System.Double,System.Double)">
             <summary>
            显示当前位置和灰度值
             </summary>
             <param name="x"></param>
             <param name="y"></param>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.HWDispImageVisible(System.Boolean)">
            <summary>
            隐藏显示Halcon窗体
            </summary>
            <param name="blVisible"></param>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.SetHalconWin">
            <summary>
            设置窗体参数
            </summary>       
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.SetHalconWinAlways">
            <summary>
            画面尺寸总是恢复
            </summary>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.SaveImage(BasicClass.ImageAll,System.String)">
            <summary>
            保存图像
            </summary>
            <param name="imageAll"></param>
            <param name="strPath"></param>
            <returns></returns>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.SaveHoImage(HalconDotNet.HObject,System.String,System.String)">
            <summary>
            保存接变换的图片
            </summary>
            <param name="ho_Image"></param>
            <param name="type"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.SaveHoImageOriginal(HalconDotNet.HObject,System.String,System.String)">
            <summary>
            保存不解变换的图像
            </summary>
            <param name="ho_Image"></param>
            <param name="type"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.ClearShapeCV">
            <summary>
            清除当前画布上的所有显示,需要回到主线程
            </summary>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.CloseShapeImage">
            <summary>
            关闭
            </summary>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.ClearShapeHalWin">
            <summary>
            清空Halcon窗体上的显示
            </summary>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.DispRectangle1(System.Double[],System.Double,System.String,System.String)">
            <summary>
            显示矩形
            </summary>
            <param name="points">点坐标</param>
            <param name="lineWidth">线宽</param>
            <param name="strColor">颜色</param>
            <param name="typeFill">margin or fill</param>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.DispRectangle2(System.Double[],System.Double,System.String,System.String)">
            <summary>
            显示矩形2
            </summary>
            <param name="value">中心X、Y，角度，长度，宽度</param>
            <param name="lineWidth">线宽</param>
            <param name="strColor">颜色</param>
            <param name="typeFill">margin or fill</param>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.DispCross(System.Double[],System.Double,System.String)">
            <summary>
            绘制十字
            </summary>
            <param name="value">中心X、Y，长度，角度</param>
            <param name="lineWidth">线宽</param>
            <param name="strColor">颜色</param>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.DispLine(System.Double[],System.Double,System.String)">
            <summary>
            绘制直线
            </summary>
            <param name="points">坐标点</param>
            <param name="strColor">颜色</param>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.DispCircle(System.Double[],System.Double,System.String,System.String)">
            <summary>
            绘制圆
            </summary>
            <param name="value">中心X、Y，半径</param>
            <param name="lineWidth">线宽</param>
            <param name="strColor">颜色</param>
            <param name="typeFill">margin or fill</param>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.DispMCircle(System.Double[],System.Double,System.String,System.String,System.String)">
            <summary>
            绘制圆
            </summary>
            <param name="value">中心X、Y，半径</param>
            <param name="lineWidth">线宽</param>
            <param name="strColor">颜色</param>
            <param name="typeFill">margin or fill</param>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.DispEllipse(System.Double[],System.Double,System.String,System.String)">
            <summary>
            绘制椭圆
            </summary>
            <param name="value">中心X、Y，角度，长轴半径，短轴半径</param>
            <param name="lineWidth">线宽</param>
            <param name="strColor">颜色</param>
            <param name="typeFill">margin or fill</param>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.DispPolygon(System.Double[],System.Double,System.String,System.String)">
            <summary>
            显示多边形
            </summary>
            <param name="value">点坐标数组</param>
            <param name="lineWidth">线宽</param>
            <param name="strColor">颜色</param>
            <param name="typeFill">margin or fill</param>
        </member>
        <member name="F:BasicDisplay.BaseUCDisplay.ho_Image">
            <summary>
            Halcon显示
            </summary>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.SetHalWinColor(System.String)">
            <summary>
            设置颜色和类型
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.SetHalWinTypeFill(System.String)">
            <summary>
            设置填充
            </summary>
            <param name="typeFill"></param>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.DispImage(HalconDotNet.HObject)">
            <summary>
            仅仅显示Halcon图像
            </summary>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.DispImage(System.String)">
            <summary>
            显示指定路径的图像
            </summary>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.DispHobject(HalconDotNet.HObject)">
            <summary>
            显示Halcon对象
            </summary>
            <param name="ho"></param>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.DispHobject(System.Collections.Generic.List{BasicClass.ImageAll})">
            <summary>
            
            </summary>
            <param name="imageAll_L"></param>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.RefreshHoImage">
            <summary>
            刷新Halcon图像
            </summary>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.RefreshDelay100HoImage">
            <summary>
            刷新Halcon图像
            </summary>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.ClearRectHalWin">
            <summary>
            清除Halcon窗体非图像部分
            </summary>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.DispImage(BasicClass.ImageAll)">
            <summary>
            显示图像，以及本地图像的路径
            </summary>
            <param name="imageAll"></param>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.DispImageHalcon(BasicClass.ImageAll)">
            <summary>
            第一次显示图像,正常显示Halcon窗体的时候，不能回到主线程，也不能清空窗体
            </summary>
            <param name="imageAll"></param>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.DispImageBitmap(BasicClass.ImageAll)">
            <summary>
            显示图像，以及本地图像的路径
            </summary>
            <param name="imageAll"></param>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.RefreshParBitmap">
            <summary>
            刷新bitmap显示相关的系数
            </summary>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.DispBImageFit">
            <summary>
            根据bitmap调整参数
            </summary>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.DisplayImageInfo">
            <summary>
            显示信息
            </summary>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.DisplayAssistantCross_HWin">
            <summary>
            辅助十字
            </summary>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.DisplayAssistantCoord_HWin">
            <summary>
            辅助坐标轴
            </summary>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.Init(BasicDisplay.BaseParSetDisplay)">
            <summary>
            初始化显示
            </summary>
            <param name="baseParSetDisplay"></param>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.InitContextMenu">
            <summary>
            初始化右键菜单
            </summary>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.GetCancasSize">
            <summary>
            获取画布的尺寸
            </summary>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.InitLog(DealLog.UCStateWork,DealLog.UCAlarm)">
            <summary>
            初始化日志控件
            </summary>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.miAssistantSharpe_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            辅助画图
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.CreateParAssitantSharpe">
            <summary>
            创建类实例
            </summary>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.miSaveAs_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            图像另存为
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.g_LblSaveImage_MouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            按照型号和相机序号命名文件夹，对图像进行保存
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.EnableBtnPhotoCtr(System.Boolean)">
            <summary>
            使能排着呢控制按钮
            </summary>
            <param name="enable"></param>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.SetTileColor(BasicDisplay.TitleType_enum)">
            <summary>
            设置标题栏颜色
            </summary>
            <param name="titleType_e"></param>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.SetTitleColor(BasicDisplay.TitleType_enum)">
            <summary>
            标题栏颜色控制,用来指示当前图像窗口的状态
            </summary>
            <param name="titleType_e"></param>
        </member>
        <member name="M:BasicDisplay.BaseUCDisplay.ShowTimeInvoke(System.String)">
            <summary>
            显示时间
            </summary>
        </member>
        <member name="P:BasicDisplay.BaseUCDisplay.Hv_WinHandle">
            <summary>
            Halcon的窗体句柄
            </summary>
        </member>
        <member name="P:BasicDisplay.BaseUCDisplay.ActualWidth_HWin">
            <summary>
            Halcon窗体的实际尺寸Width
            </summary>
        </member>
        <member name="P:BasicDisplay.BaseUCDisplay.ActualHeight_HWin">
            <summary>
            Halcon窗体的实际尺寸Height
            </summary>
        </member>
        <member name="P:BasicDisplay.BaseUCDisplay.ActualWidth_CcImage">
            <summary>
            Halcon窗体的实际尺寸Width2
            </summary>
        </member>
        <member name="P:BasicDisplay.BaseUCDisplay.ActualHeight_CcImage">
            <summary>
            Halcon窗体的实际尺寸Height2
            </summary>
        </member>
        <member name="P:BasicDisplay.BaseUCDisplay.PathRootLocalImage">
            <summary>
            保存图片路径
            </summary>
        </member>
        <member name="P:BasicDisplay.BaseUCDisplay.Count">
            <summary>
            本地图片数目
            </summary>
        </member>
        <member name="T:BasicDisplay.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:BasicDisplay.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:BasicDisplay.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="M:BasicDisplay.ParAssitantCoord.WriteIniPar(System.String)">
            <summary>
            写入参数
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:BasicDisplay.ParSetDisplay">
            <summary>
            按照窗口的序号，设置了每个显示所需要的参数
            </summary>
        </member>
        <member name="F:BasicDisplay.ParSetDisplay.BlSmallWin">
            <summary>
            小窗体模式
            </summary>
        </member>
        <member name="F:BasicDisplay.ParSetDisplay.BlSlideWin">
            <summary>
            边栏窗体
            </summary>
        </member>
        <member name="M:BasicDisplay.ParSetDisplay.CheckPar">
            <summary>
            验证参数是否正确
            </summary>
            <returns></returns>
        </member>
        <member name="M:BasicDisplay.ParSetDisplay.ReadIniPar">
            <summary>
            从Ini中读取图像
            </summary>
            <returns></returns>
        </member>
        <member name="M:BasicDisplay.ParSetDisplay.WriteIniPar">
            <summary>
            从Ini中读取图像
            </summary>
            <returns></returns>
        </member>
        <member name="T:BasicDisplay.TitleType_enum">
            <summary>
            标题栏状态
            </summary>
        </member>
        <member name="F:BasicDisplay.BaseParSetDisplay.colorOK">
            标题栏颜色
        </member>
        <member name="F:BasicDisplay.ParAssitantCross.xCenterCross">
            <summary>
            十字坐标
            </summary>
        </member>
        <member name="M:BasicDisplay.ParAssitantCross.WriteIniPar(System.String)">
            <summary>
            写入参数
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:BasicDisplay.UCAssistantCoord">
            <summary>
            UCAssistantCross.xaml 的交互逻辑
            </summary>
            <summary>
            UCAssistantCoord
            </summary>
        </member>
        <member name="M:BasicDisplay.UCAssistantCoord.tsbDisplayArrow_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            是否绘制十字
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:BasicDisplay.UCAssistantCoord.cboColorRow_ColorChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.String})">
            <summary>
            颜色
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:BasicDisplay.UCAssistantCoord.dudLengthRow_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            长度
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:BasicDisplay.UCAssistantCoord.dudThicknessRow_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            线宽
            </summary>
            <param name="sender"></param>
            <param name="e"></param>        
        </member>
        <member name="M:BasicDisplay.UCAssistantCoord.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:BasicDisplay.UCAssistantCross">
            <summary>
            UCAssistantCross.xaml 的交互逻辑
            </summary>
            <summary>
            UCAssistantCross
            </summary>
        </member>
        <member name="M:BasicDisplay.UCAssistantCross.tsbDisplayCross_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            是否绘制十字
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:BasicDisplay.UCAssistantCross.cboColorCross_ColorChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.String})">
            <summary>
            十字颜色
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:BasicDisplay.UCAssistantCross.dudLengthCross_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            十字长度
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:BasicDisplay.UCAssistantCross.dudThicknessCross_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            十字线宽
            </summary>
            <param name="sender"></param>
            <param name="e"></param>        
        </member>
        <member name="M:BasicDisplay.UCAssistantCross.dudXCenterCross_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            十字中心X
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:BasicDisplay.UCAssistantCross.dudYCenterCross_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            十字中心Y
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:BasicDisplay.UCAssistantCross.dudRCenterCross_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            十字中心R
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:BasicDisplay.UCAssistantCross.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:BasicDisplay.UCDisplayImage">
            <summary>
            BaseUCDisplay.xaml 的交互逻辑
            </summary>
            <summary>
            UCDisplayImage
            </summary>
        </member>
        <member name="M:BasicDisplay.UCDisplayImage.Init(BasicDisplay.BaseParSetDisplay)">
            <summary>
            初始化参数
            </summary>
            <param name="baseParSetDisplay"></param>
        </member>
        <member name="M:BasicDisplay.UCDisplayImage.lblSaveImage_MouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            按照型号和相机序号命名文件夹，对图像进行保存
            </summary>
        </member>
        <member name="M:BasicDisplay.UCDisplayImage.SaveImage(HalconDotNet.HObject,System.String)">
            <summary>
            保存图像到指定的路径
            </summary>
        </member>
        <member name="M:BasicDisplay.UCDisplayImage.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:BasicDisplay.WinSetDisplayImage">
            <summary>
            WinSetDisplayImage.xaml 的交互逻辑
            </summary>
            <summary>
            WinSetDisplayImage
            </summary>
        </member>
        <member name="M:BasicDisplay.WinSetDisplayImage.dudNumDisplayImage_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            显示窗体个数
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:BasicDisplay.WinSetDisplayImage.ChangeRow">
            <summary>
            根据窗口个数调整datagrid显示行数
            </summary>
        </member>
        <member name="M:BasicDisplay.WinSetDisplayImage.dudPixelX_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            宽度
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:BasicDisplay.WinSetDisplayImage.dudPixelY_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            高度
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:BasicDisplay.WinSetDisplayImage.cboTypeDisplayImage_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            显示类型调整
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:BasicDisplay.WinSetDisplayImage.cboTransDisplayImage_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            转换显示类型设置
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <!-- 对于成员“M:BasicDisplay.WinSetDisplayImage.CheckTypeShow(BasicDisplay.TypeDisplayImage_enum)”忽略有格式错误的 XML 注释 -->
        <member name="M:BasicDisplay.WinSetDisplayImage.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:BasicDisplay.WinAssistantSharpe">
            <summary>
            WinAssistantSharpe.xaml 的交互逻辑
            </summary>
            <summary>
            WinAssistantSharpe
            </summary>
        </member>
        <member name="M:BasicDisplay.WinAssistantSharpe.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
    </members>
</doc>
